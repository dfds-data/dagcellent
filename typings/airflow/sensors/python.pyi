"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable, Mapping, Sequence
from typing import TYPE_CHECKING, Any

from airflow.sensors.base import BaseSensorOperator, PokeReturnValue
from airflow.utils.context import Context

if TYPE_CHECKING: ...

class PythonSensor(BaseSensorOperator):
    """
    Waits for a Python callable to return True.

    User could put input argument in templates_dict
    e.g ``templates_dict = {'start_ds': 1970}``
    and access the argument by calling ``kwargs['templates_dict']['start_ds']``
    in the callable

    :param python_callable: A reference to an object that is callable
    :param op_kwargs: a dictionary of keyword arguments that will get unpacked
        in your function
    :param op_args: a list of positional arguments that will get unpacked when
        calling your callable
    :param templates_dict: a dictionary where the values are templates that
        will get templated by the Airflow engine sometime between
        ``__init__`` and ``execute`` takes place and are made available
        in your callable's context after the template has been applied.

    .. seealso::
        For more information on how to use this sensor, take a look at the guide:
        :ref:`howto/operator:PythonSensor`
    """

    template_fields: Sequence[str] = ...
    def __init__(
        self,
        *,
        python_callable: Callable,
        op_args: list | None = ...,
        op_kwargs: Mapping[str, Any] | None = ...,
        templates_dict: dict | None = ...,
        **kwargs,
    ) -> None: ...
    def poke(self, context: Context) -> PokeReturnValue | bool: ...
