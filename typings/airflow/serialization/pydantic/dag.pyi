"""
This type stub file was generated by pyright.
"""

import pathlib
from datetime import datetime
from typing import Annotated, Any

from airflow import DAG
from airflow.utils.pydantic import (
    BaseModel as BaseModelPydantic,
    PlainSerializer,
    PlainValidator,
    ValidationInfo,
)
from airflow.utils.sqlalchemy import Interval

def serialize_interval(value: Interval) -> Interval: ...
def validate_interval(value: Interval | Any, _info: ValidationInfo) -> Any: ...

PydanticInterval = Annotated[
    Interval,
    PlainValidator(validate_interval),
    PlainSerializer(serialize_interval, return_type=Interval),
]

def serialize_operator(x: DAG) -> dict: ...
def validate_operator(x: DAG | dict[str, Any], _info: ValidationInfo) -> Any: ...

PydanticDag = Annotated[
    DAG,
    PlainValidator(validate_operator),
    PlainSerializer(serialize_operator, return_type=dict),
]

class DagOwnerAttributesPydantic(BaseModelPydantic):
    """Serializable representation of the DagOwnerAttributes ORM SqlAlchemyModel used by internal API."""

    owner: str
    link: str
    model_config = ...

class DagTagPydantic(BaseModelPydantic):
    """Serializable representation of the DagTag ORM SqlAlchemyModel used by internal API."""

    name: str
    dag_id: str
    model_config = ...

class DagModelPydantic(BaseModelPydantic):
    """Serializable representation of the DagModel ORM SqlAlchemyModel used by internal API."""

    dag_id: str
    root_dag_id: str | None
    is_paused_at_creation: bool = ...
    is_paused: bool = ...
    is_subdag: bool | None = ...
    is_active: bool | None = ...
    last_parsed_time: datetime | None
    last_pickled: datetime | None
    last_expired: datetime | None
    scheduler_lock: bool | None
    pickle_id: int | None
    fileloc: str
    processor_subdir: str | None
    owners: str | None
    description: str | None
    default_view: str | None
    schedule_interval: PydanticInterval | None
    timetable_description: str | None
    tags: list[DagTagPydantic]
    dag_owner_links: list[DagOwnerAttributesPydantic]
    parent_dag: PydanticDag | None
    max_active_tasks: int
    max_active_runs: int | None
    max_consecutive_failed_dag_runs: int | None
    has_task_concurrency_limits: bool
    has_import_errors: bool | None = ...
    _processor_dags_folder: str | None = ...
    model_config = ...
    @property
    def relative_fileloc(self) -> pathlib.Path:
        """File location of the importable dag 'file' relative to the configured DAGs folder."""
        ...
