"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from datetime import datetime
from typing import TYPE_CHECKING

from airflow.jobs.scheduler_job_runner import TI
from airflow.serialization.pydantic.dag import PydanticDag
from airflow.serialization.pydantic.dataset import DatasetEventPydantic
from airflow.serialization.pydantic.taskinstance import TaskInstancePydantic
from airflow.utils.pydantic import (
    BaseModel as BaseModelPydantic,
    is_pydantic_2_installed,
)
from airflow.utils.state import TaskInstanceState
from sqlalchemy.orm import Session

if TYPE_CHECKING: ...

class DagRunPydantic(BaseModelPydantic):
    """Serializable representation of the DagRun ORM SqlAlchemyModel used by internal API."""

    id: int
    dag_id: str
    queued_at: datetime | None
    execution_date: datetime
    start_date: datetime | None
    end_date: datetime | None
    state: str
    run_id: str
    creating_job_id: int | None
    external_trigger: bool
    run_type: str
    conf: dict
    data_interval_start: datetime | None
    data_interval_end: datetime | None
    last_scheduling_decision: datetime | None
    dag_hash: str | None
    updated_at: datetime | None
    dag: PydanticDag | None
    consumed_dataset_events: list[DatasetEventPydantic]
    log_template_id: int | None
    model_config = ...
    @property
    def logical_date(self) -> datetime: ...
    def get_task_instances(
        self, state: Iterable[TaskInstanceState | None] | None = ..., session=...
    ) -> list[TI]:
        """
        Return the task instances for this dag run.

        Redirect to DagRun.fetch_task_instances method.
        Keep this method because it is widely used across the code.
        """
        ...

    def get_task_instance(
        self, task_id: str, session: Session, *, map_index: int = ...
    ) -> TI | TaskInstancePydantic | None:
        """
        Return the task instance specified by task_id for this dag run.

        :param task_id: the task id
        :param session: Sqlalchemy ORM Session
        """
        ...

    def get_log_template(
        self, session: Session
    ):  # -> LogTemplate | LogTemplatePydantic:
        ...

if is_pydantic_2_installed(): ...
