"""
This type stub file was generated by pyright.
"""

import argparse
from collections.abc import Callable, Iterable
from typing import NamedTuple, Union

from airflow.settings import _ENABLE_AIP_44

"""Explicit configuration and definition of Airflow CLI commands."""
BUILD_DOCS = ...

def lazy_load_command(import_path: str) -> Callable:
    """Create a lazy loader for command."""
    ...

class DefaultHelpParser(argparse.ArgumentParser):
    """CustomParser to display help message."""

    def error(self, message):
        """Override error and use print_instead of print_usage."""
        ...

_UNSET = ...

class Arg:
    """Class to keep information about command line argument."""

    def __init__(
        self,
        flags=...,
        help=...,
        action=...,
        default=...,
        nargs=...,
        type=...,
        choices=...,
        required=...,
        metavar=...,
        dest=...,
    ) -> None: ...
    def add_to_parser(self, parser: argparse.ArgumentParser):  # -> None:
        """Add this argument to an ArgumentParser."""
        ...

def positive_int(*, allow_zero):  # -> Callable[..., int]:
    """Define a positive int type for an argument."""
    ...

def string_list_type(val):  # -> list[Any]:
    """Parse comma-separated list and returns list of string (strips whitespace)."""
    ...

def string_lower_type(val):  # -> None:
    """Lower arg."""
    ...

ARG_DAG_ID = ...
ARG_TASK_ID = ...
ARG_EXECUTION_DATE = ...
ARG_EXECUTION_DATE_OPTIONAL = ...
ARG_EXECUTION_DATE_OR_RUN_ID = ...
ARG_EXECUTION_DATE_OR_RUN_ID_OPTIONAL = ...
ARG_TASK_REGEX = ...
ARG_SUBDIR = ...
ARG_START_DATE = ...
ARG_END_DATE = ...
ARG_OUTPUT_PATH = ...
ARG_DRY_RUN = ...
ARG_PID = ...
ARG_DAEMON = ...
ARG_STDERR = ...
ARG_STDOUT = ...
ARG_LOG_FILE = ...
ARG_YES = ...
ARG_OUTPUT = ...
ARG_COLOR = ...
ARG_VERSION_RANGE = ...
ARG_REVISION_RANGE = ...
ARG_SKIP_SERVE_LOGS = ...
ARG_DAG_ID_REQ_FLAG = ...
ARG_NO_BACKFILL = ...
dagrun_states = ...
ARG_DR_STATE = ...
ARG_DAG_ID_OPT = ...
ARG_LIMIT = ...
job_states = ...
ARG_JOB_STATE = ...
ARG_NUM_EXECUTIONS = ...
ARG_MARK_SUCCESS = ...
ARG_INCLUDE_DESCRIPTIONS = ...
ARG_INCLUDE_EXAMPLES = ...
ARG_INCLUDE_SOURCES = ...
ARG_INCLUDE_ENV_VARS = ...
ARG_COMMENT_OUT_EVERYTHING = ...
ARG_EXCLUDE_PROVIDERS = ...
ARG_DEFAULTS = ...
ARG_VERBOSE = ...
ARG_LOCAL = ...
ARG_DONOT_PICKLE = ...
ARG_BF_IGNORE_DEPENDENCIES = ...
ARG_BF_IGNORE_FIRST_DEPENDS_ON_PAST = ...
ARG_POOL = ...
ARG_DELAY_ON_LIMIT = ...
ARG_RESET_DAG_RUN = ...
ARG_RERUN_FAILED_TASKS = ...
ARG_CONTINUE_ON_FAILURES = ...
ARG_DISABLE_RETRY = ...
ARG_RUN_BACKWARDS = ...
ARG_TREAT_DAG_AS_REGEX = ...
ARG_TREAT_DAG_ID_AS_REGEX = ...
ARG_SHOW_DAGRUN = ...
ARG_IMGCAT_DAGRUN = ...
ARG_SAVE_DAGRUN = ...
ARG_USE_EXECUTOR = ...
ARG_MARK_SUCCESS_PATTERN = ...
ARG_TREE = ...
ARG_SHUT_DOWN_LOGGING = ...
ARG_UPSTREAM = ...
ARG_ONLY_FAILED = ...
ARG_ONLY_RUNNING = ...
ARG_DOWNSTREAM = ...
ARG_EXCLUDE_SUBDAGS = ...
ARG_EXCLUDE_PARENTDAG = ...
ARG_DAG_REGEX = ...
ARG_SAVE = ...
ARG_IMGCAT = ...
ARG_RUN_ID = ...
ARG_CONF = ...
ARG_EXEC_DATE = ...
ARG_REPLACE_MICRO = ...
ARG_DB_TABLES = ...
ARG_DB_CLEANUP_TIMESTAMP = ...
ARG_DB_DRY_RUN = ...
ARG_DB_SKIP_ARCHIVE = ...
ARG_DB_EXPORT_FORMAT = ...
ARG_DB_OUTPUT_PATH = ...
ARG_DB_DROP_ARCHIVES = ...
ARG_DB_RETRY = ...
ARG_DB_RETRY_DELAY = ...
ARG_POOL_NAME = ...
ARG_POOL_SLOTS = ...
ARG_POOL_DESCRIPTION = ...
ARG_POOL_INCLUDE_DEFERRED = ...
ARG_POOL_IMPORT = ...
ARG_POOL_EXPORT = ...
ARG_VAR = ...
ARG_VAR_VALUE = ...
ARG_DEFAULT = ...
ARG_VAR_DESCRIPTION = ...
ARG_DESERIALIZE_JSON = ...
ARG_SERIALIZE_JSON = ...
ARG_VAR_IMPORT = ...
ARG_VAR_EXPORT = ...
ARG_VAR_ACTION_ON_EXISTING_KEY = ...
ARG_PRINCIPAL = ...
ARG_KEYTAB = ...
ARG_KERBEROS_ONE_TIME_MODE = ...
ARG_INTERACTIVE = ...
ARG_FORCE = ...
ARG_RAW = ...
ARG_IGNORE_ALL_DEPENDENCIES = ...
ARG_IGNORE_DEPENDENCIES = ...
ARG_IGNORE_DEPENDS_ON_PAST = ...
ARG_DEPENDS_ON_PAST = ...
ARG_SHIP_DAG = ...
ARG_PICKLE = ...
ARG_JOB_ID = ...
ARG_CFG_PATH = ...
ARG_MAP_INDEX = ...
ARG_READ_FROM_DB = ...
ARG_MIGRATION_TIMEOUT = ...
ARG_DB_RESERIALIZE_DAGS = ...
ARG_DB_VERSION__UPGRADE = ...
ARG_DB_REVISION__UPGRADE = ...
ARG_DB_VERSION__DOWNGRADE = ...
ARG_DB_FROM_VERSION = ...
ARG_DB_REVISION__DOWNGRADE = ...
ARG_DB_FROM_REVISION = ...
ARG_DB_SQL_ONLY = ...
ARG_DB_SKIP_INIT = ...
ARG_DB_USE_MIGRATION_FILES = ...
ARG_PORT = ...
ARG_SSL_CERT = ...
ARG_SSL_KEY = ...
ARG_WORKERS = ...
ARG_WORKERCLASS = ...
ARG_WORKER_TIMEOUT = ...
ARG_HOSTNAME = ...
ARG_DEBUG = ...
ARG_ACCESS_LOGFILE = ...
ARG_ERROR_LOGFILE = ...
ARG_ACCESS_LOGFORMAT = ...
ARG_INTERNAL_API_PORT = ...
ARG_INTERNAL_API_WORKERS = ...
ARG_INTERNAL_API_WORKERCLASS = ...
ARG_INTERNAL_API_WORKER_TIMEOUT = ...
ARG_INTERNAL_API_HOSTNAME = ...
ARG_INTERNAL_API_ACCESS_LOGFILE = ...
ARG_INTERNAL_API_ERROR_LOGFILE = ...
ARG_INTERNAL_API_ACCESS_LOGFORMAT = ...
ARG_NUM_RUNS = ...
ARG_DO_PICKLE = ...
ARG_WITHOUT_MINGLE = ...
ARG_WITHOUT_GOSSIP = ...
ARG_TASK_PARAMS = ...
ARG_POST_MORTEM = ...
ARG_ENV_VARS = ...
ARG_CONN_ID = ...
ARG_CONN_ID_FILTER = ...
ARG_CONN_URI = ...
ARG_CONN_JSON = ...
ARG_CONN_TYPE = ...
ARG_CONN_DESCRIPTION = ...
ARG_CONN_HOST = ...
ARG_CONN_LOGIN = ...
ARG_CONN_PASSWORD = ...
ARG_CONN_SCHEMA = ...
ARG_CONN_PORT = ...
ARG_CONN_EXTRA = ...
ARG_CONN_EXPORT = ...
ARG_CONN_EXPORT_FORMAT = ...
ARG_CONN_EXPORT_FILE_FORMAT = ...
ARG_CONN_SERIALIZATION_FORMAT = ...
ARG_CONN_IMPORT = ...
ARG_CONN_OVERWRITE = ...
ARG_PROVIDER_NAME = ...
ARG_FULL = ...
ARG_ANONYMIZE = ...
ARG_FILE_IO = ...
ARG_SECTION = ...
ARG_OPTION = ...
ARG_OPTIONAL_SECTION = ...
ARG_NAMESPACE = ...
ARG_MIN_PENDING_MINUTES = ...
ARG_JOB_TYPE_FILTER = ...
ARG_JOB_HOSTNAME_FILTER = ...
ARG_JOB_HOSTNAME_CALLABLE_FILTER = ...
ARG_JOB_LIMIT = ...
ARG_ALLOW_MULTIPLE = ...
ARG_CAPACITY = ...
ARG_CLEAR_ONLY = ...
ARG_DAG_LIST_COLUMNS = ...
ALTERNATIVE_CONN_SPECS_ARGS = ...

class ActionCommand(NamedTuple):
    """Single CLI command."""

    name: str
    help: str
    func: Callable
    args: Iterable[Arg]
    description: str | None = ...
    epilog: str | None = ...
    hide: bool = ...

class GroupCommand(NamedTuple):
    """ClI command with subcommands."""

    name: str
    help: str
    subcommands: Iterable
    description: str | None = ...
    epilog: str | None = ...

CLICommand = Union[ActionCommand, GroupCommand]
DAGS_COMMANDS = ...
TASKS_COMMANDS = ...
POOLS_COMMANDS = ...
VARIABLES_COMMANDS = ...
DB_COMMANDS = ...
CONNECTIONS_COMMANDS = ...
PROVIDERS_COMMANDS = ...
CONFIG_COMMANDS = ...
KUBERNETES_COMMANDS = ...
JOBS_COMMANDS = ...
core_commands: list[CLICommand] = ...
if _ENABLE_AIP_44: ...
dag_cli_commands: list[CLICommand] = ...
DAG_CLI_DICT: dict[str, CLICommand] = ...
