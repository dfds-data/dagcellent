"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from typing import TYPE_CHECKING

from airflow.models.baseoperator import BaseOperator
from airflow.models.skipmixin import SkipMixin
from airflow.utils.context import Context

"""Branching operators."""
if TYPE_CHECKING: ...

class BranchMixIn(SkipMixin):
    """Utility helper which handles the branching as one-liner."""

    def do_branch(
        self, context: Context, branches_to_execute: str | Iterable[str]
    ) -> str | Iterable[str]:
        """Implement the handling of branching including logging."""
        ...

class BaseBranchOperator(BaseOperator, BranchMixIn):
    """
    A base class for creating operators with branching functionality, like to BranchPythonOperator.

    Users should create a subclass from this operator and implement the function
    `choose_branch(self, context)`. This should run whatever business logic
    is needed to determine the branch, and return one of the following:
    - A single task_id (as a str)
    - A single task_group_id (as a str)
    - A list containing a combination of task_ids and task_group_ids

    The operator will continue with the returned task_id(s) and/or task_group_id(s), and all other
    tasks directly downstream of this operator will be skipped.
    """

    def choose_branch(self, context: Context) -> str | Iterable[str]:
        """
        Abstract method to choose which branch to run.

        Subclasses should implement this, running whatever logic is
        necessary to choose a branch and returning a task_id or list of
        task_ids.

        :param context: Context dictionary as passed to execute()
        """
        ...

    def execute(self, context: Context):  # -> str | Iterable[str]:
        ...
