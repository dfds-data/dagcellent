"""
This type stub file was generated by pyright.
"""

import os
from abc import ABCMeta
from collections.abc import Callable, Collection, Container, Iterable, Mapping, Sequence
from typing import (
    TYPE_CHECKING,
    Any,
    NamedTuple,
)

from airflow.models.baseoperator import BaseOperator
from airflow.models.skipmixin import SkipMixin
from airflow.operators.branch import BranchMixIn
from airflow.typing_compat import Literal
from airflow.utils.context import Context

log = ...
if TYPE_CHECKING: ...

def is_venv_installed() -> bool:
    """
    Check if the virtualenv package is installed via checking if it is on the path or installed as package.

    :return: True if it is. Whichever way of checking it works, is fine.
    """
    ...

def task(
    python_callable: Callable | None = ...,
    multiple_outputs: bool | None = ...,
    **kwargs,
):  # -> TaskDecorator:
    """
    Use :func:`airflow.decorators.task` instead, this is deprecated.

    Calls ``@task.python`` and allows users to turn a Python function into
    an Airflow task.

    :param python_callable: A reference to an object that is callable
    :param op_kwargs: a dictionary of keyword arguments that will get unpacked
        in your function (templated)
    :param op_args: a list of positional arguments that will get unpacked when
        calling your callable (templated)
    :param multiple_outputs: if set, function return value will be
        unrolled to multiple XCom values. Dict will unroll to xcom values with keys as keys.
        Defaults to False.
    """
    ...

class _PythonVersionInfo(NamedTuple):
    """Provide the same interface as ``sys.version_info``."""

    major: int
    minor: int
    micro: int
    releaselevel: str
    serial: int
    @classmethod
    def from_executable(cls, executable: str) -> _PythonVersionInfo:
        """Parse python version info from an executable."""
        ...

class PythonOperator(BaseOperator):
    """
    Executes a Python callable.

    .. seealso::
        For more information on how to use this operator, take a look at the guide:
        :ref:`howto/operator:PythonOperator`

    When running your callable, Airflow will pass a set of keyword arguments that can be used in your
    function. This set of kwargs correspond exactly to what you can use in your jinja templates.
    For this to work, you need to define ``**kwargs`` in your function header, or you can add directly the
    keyword arguments you would like to get - for example with the below code your callable will get
    the values of ``ti`` and ``next_ds`` context variables.

    With explicit arguments:

    .. code-block:: python

       def my_python_callable(ti, next_ds):
           pass

    With kwargs:

    .. code-block:: python

       def my_python_callable(**kwargs):
           ti = kwargs["ti"]
           next_ds = kwargs["next_ds"]


    :param python_callable: A reference to an object that is callable
    :param op_args: a list of positional arguments that will get unpacked when
        calling your callable
    :param op_kwargs: a dictionary of keyword arguments that will get unpacked
        in your function
    :param templates_dict: a dictionary where the values are templates that
        will get templated by the Airflow engine sometime between
        ``__init__`` and ``execute`` takes place and are made available
        in your callable's context after the template has been applied. (templated)
    :param templates_exts: a list of file extensions to resolve while
        processing templated fields, for examples ``['.sql', '.hql']``
    :param show_return_value_in_logs: a bool value whether to show return_value
        logs. Defaults to True, which allows return value log output.
        It can be set to False to prevent log output of return value when you return huge data
        such as transmission a large amount of XCom to TaskAPI.
    """

    template_fields: Sequence[str] = ...
    template_fields_renderers = ...
    BLUE = ...
    ui_color = ...
    shallow_copy_attrs: Sequence[str] = ...
    def __init__(
        self,
        *,
        python_callable: Callable,
        op_args: Collection[Any] | None = ...,
        op_kwargs: Mapping[str, Any] | None = ...,
        templates_dict: dict[str, Any] | None = ...,
        templates_exts: Sequence[str] | None = ...,
        show_return_value_in_logs: bool = ...,
        **kwargs,
    ) -> None: ...
    def execute(self, context: Context) -> Any: ...
    def determine_kwargs(self, context: Mapping[str, Any]) -> Mapping[str, Any]: ...
    def execute_callable(self) -> Any:
        """
        Call the python callable with the given arguments.

        :return: the return value of the call.
        """
        ...

class BranchPythonOperator(PythonOperator, BranchMixIn):
    """
    A workflow can "branch" or follow a path after the execution of this task.

    It derives the PythonOperator and expects a Python function that returns
    a single task_id, a single task_group_id, or a list of task_ids and/or
    task_group_ids to follow. The task_id(s) and/or task_group_id(s) returned
    should point to a task or task group directly downstream from {self}. All
    other "branches" or directly downstream tasks are marked with a state of
    ``skipped`` so that these paths can't move forward. The ``skipped`` states
    are propagated downstream to allow for the DAG state to fill up and
    the DAG run's state to be inferred.
    """

    def execute(self, context: Context) -> Any: ...

class ShortCircuitOperator(PythonOperator, SkipMixin):
    """
    Allows a pipeline to continue based on the result of a ``python_callable``.

    The ShortCircuitOperator is derived from the PythonOperator and evaluates the result of a
    ``python_callable``. If the returned result is False or a falsy value, the pipeline will be
    short-circuited. Downstream tasks will be marked with a state of "skipped" based on the short-circuiting
    mode configured. If the returned result is True or a truthy value, downstream tasks proceed as normal and
    an ``XCom`` of the returned result is pushed.

    The short-circuiting can be configured to either respect or ignore the ``trigger_rule`` set for
    downstream tasks. If ``ignore_downstream_trigger_rules`` is set to True, the default setting, all
    downstream tasks are skipped without considering the ``trigger_rule`` defined for tasks. However, if this
    parameter is set to False, the direct downstream tasks are skipped but the specified ``trigger_rule`` for
    other subsequent downstream tasks are respected. In this mode, the operator assumes the direct downstream
    tasks were purposely meant to be skipped but perhaps not other subsequent tasks.

    .. seealso::
        For more information on how to use this operator, take a look at the guide:
        :ref:`howto/operator:ShortCircuitOperator`

    :param ignore_downstream_trigger_rules: If set to True, all downstream tasks from this operator task will
        be skipped. This is the default behavior. If set to False, the direct, downstream task(s) will be
        skipped but the ``trigger_rule`` defined for all other downstream tasks will be respected.
    """

    def __init__(
        self, *, ignore_downstream_trigger_rules: bool = ..., **kwargs
    ) -> None: ...
    def execute(self, context: Context) -> Any: ...

_SerializerTypeDef = Literal["pickle", "cloudpickle", "dill"]
_SERIALIZERS: dict[_SerializerTypeDef, Any] = ...

class _BasePythonVirtualenvOperator(PythonOperator, metaclass=ABCMeta):
    BASE_SERIALIZABLE_CONTEXT_KEYS = ...
    PENDULUM_SERIALIZABLE_CONTEXT_KEYS = ...
    AIRFLOW_SERIALIZABLE_CONTEXT_KEYS = ...
    def __init__(
        self,
        *,
        python_callable: Callable,
        serializer: _SerializerTypeDef | None = ...,
        op_args: Collection[Any] | None = ...,
        op_kwargs: Mapping[str, Any] | None = ...,
        string_args: Iterable[str] | None = ...,
        templates_dict: dict | None = ...,
        templates_exts: list[str] | None = ...,
        expect_airflow: bool = ...,
        skip_on_exit_code: int | Container[int] | None = ...,
        env_vars: dict[str, str] | None = ...,
        inherit_env: bool = ...,
        use_dill: bool = ...,
        **kwargs,
    ) -> None: ...
    def execute(self, context: Context) -> Any: ...
    def get_python_source(self):  # -> str:
        """Return the source of self.python_callable."""
        ...

    def __deepcopy__(self, memo):  # -> Self:
        ...
    def determine_kwargs(self, context: Mapping[str, Any]) -> Mapping[str, Any]: ...

class PythonVirtualenvOperator(_BasePythonVirtualenvOperator):
    """
    Run a function in a virtualenv that is created and destroyed automatically.

    The function (has certain caveats) must be defined using def, and not be
    part of a class. All imports must happen inside the function
    and no variables outside the scope may be referenced. A global scope
    variable named virtualenv_string_args will be available (populated by
    string_args). In addition, one can pass stuff through op_args and op_kwargs, and one
    can use a return value.
    Note that if your virtualenv runs in a different Python major version than Airflow,
    you cannot use return values, op_args, op_kwargs, or use any macros that are being provided to
    Airflow through plugins. You can use string_args though.

    .. seealso::
        For more information on how to use this operator, take a look at the guide:
        :ref:`howto/operator:PythonVirtualenvOperator`

    :param python_callable: A python function with no references to outside variables,
        defined with def, which will be run in a virtual environment.
    :param requirements: Either a list of requirement strings, or a (templated)
        "requirements file" as specified by pip.
    :param python_version: The Python version to run the virtual environment with. Note that
        both 2 and 2.7 are acceptable forms.
    :param serializer: Which serializer use to serialize the args and result. It can be one of the following:

        - ``"pickle"``: (default) Use pickle for serialization. Included in the Python Standard Library.
        - ``"cloudpickle"``: Use cloudpickle for serialize more complex types,
          this requires to include cloudpickle in your requirements.
        - ``"dill"``: Use dill for serialize more complex types,
          this requires to include dill in your requirements.
    :param system_site_packages: Whether to include
        system_site_packages in your virtual environment.
        See virtualenv documentation for more information.
    :param pip_install_options: a list of pip install options when installing requirements
        See 'pip install -h' for available options
    :param op_args: A list of positional arguments to pass to python_callable.
    :param op_kwargs: A dict of keyword arguments to pass to python_callable.
    :param string_args: Strings that are present in the global var virtualenv_string_args,
        available to python_callable at runtime as a list[str]. Note that args are split
        by newline.
    :param templates_dict: a dictionary where the values are templates that
        will get templated by the Airflow engine sometime between
        ``__init__`` and ``execute`` takes place and are made available
        in your callable's context after the template has been applied
    :param templates_exts: a list of file extensions to resolve while
        processing templated fields, for examples ``['.sql', '.hql']``
    :param expect_airflow: expect Airflow to be installed in the target environment. If true, the operator
        will raise warning if Airflow is not installed, and it will attempt to load Airflow
        macros when starting.
    :param skip_on_exit_code: If python_callable exits with this exit code, leave the task
        in ``skipped`` state (default: None). If set to ``None``, any non-zero
        exit code will be treated as a failure.
    :param index_urls: an optional list of index urls to load Python packages from.
        If not provided the system pip conf will be used to source packages from.
    :param venv_cache_path: Optional path to the virtual environment parent folder in which the
        virtual environment will be cached, creates a sub-folder venv-{hash} whereas hash will be replaced
        with a checksum of requirements. If not provided the virtual environment will be created and deleted
        in a temp folder for every execution.
    :param env_vars: A dictionary containing additional environment variables to set for the virtual
        environment when it is executed.
    :param inherit_env: Whether to inherit the current environment variables when executing the virtual
        environment. If set to ``True``, the virtual environment will inherit the environment variables
        of the parent process (``os.environ``). If set to ``False``, the virtual environment will be
        executed with a clean environment.
    :param use_dill: Deprecated, use ``serializer`` instead. Whether to use dill to serialize
        the args and result (pickle is default). This allows more complex types
        but requires you to include dill in your requirements.
    """

    template_fields: Sequence[str] = ...
    template_ext: Sequence[str] = ...
    def __init__(
        self,
        *,
        python_callable: Callable,
        requirements: None | Iterable[str] | str = ...,
        python_version: str | None = ...,
        serializer: _SerializerTypeDef | None = ...,
        system_site_packages: bool = ...,
        pip_install_options: list[str] | None = ...,
        op_args: Collection[Any] | None = ...,
        op_kwargs: Mapping[str, Any] | None = ...,
        string_args: Iterable[str] | None = ...,
        templates_dict: dict | None = ...,
        templates_exts: list[str] | None = ...,
        expect_airflow: bool = ...,
        skip_on_exit_code: int | Container[int] | None = ...,
        index_urls: None | Collection[str] | str = ...,
        venv_cache_path: None | os.PathLike[str] = ...,
        env_vars: dict[str, str] | None = ...,
        inherit_env: bool = ...,
        use_dill: bool = ...,
        **kwargs,
    ) -> None: ...
    def execute_callable(self):  # -> Any | None:
        ...

class BranchPythonVirtualenvOperator(PythonVirtualenvOperator, BranchMixIn):
    """
    A workflow can "branch" or follow a path after the execution of this task in a virtual environment.

    It derives the PythonVirtualenvOperator and expects a Python function that returns
    a single task_id, a single task_group_id, or a list of task_ids and/or
    task_group_ids to follow. The task_id(s) and/or task_group_id(s) returned
    should point to a task or task group directly downstream from {self}. All
    other "branches" or directly downstream tasks are marked with a state of
    ``skipped`` so that these paths can't move forward. The ``skipped`` states
    are propagated downstream to allow for the DAG state to fill up and
    the DAG run's state to be inferred.

    .. seealso::
        For more information on how to use this operator, take a look at the guide:
        :ref:`howto/operator:BranchPythonVirtualenvOperator`
    """

    def execute(self, context: Context) -> Any: ...

class ExternalPythonOperator(_BasePythonVirtualenvOperator):
    """
    Run a function in a virtualenv that is not re-created.

    Reused as is without the overhead of creating the virtual environment (with certain caveats).

    The function must be defined using def, and not be
    part of a class. All imports must happen inside the function
    and no variables outside the scope may be referenced. A global scope
    variable named virtualenv_string_args will be available (populated by
    string_args). In addition, one can pass stuff through op_args and op_kwargs, and one
    can use a return value.
    Note that if your virtual environment runs in a different Python major version than Airflow,
    you cannot use return values, op_args, op_kwargs, or use any macros that are being provided to
    Airflow through plugins. You can use string_args though.

    If Airflow is installed in the external environment in different version that the version
    used by the operator, the operator will fail.,

    .. seealso::
        For more information on how to use this operator, take a look at the guide:
        :ref:`howto/operator:ExternalPythonOperator`

    :param python: Full path string (file-system specific) that points to a Python binary inside
        a virtual environment that should be used (in ``VENV/bin`` folder). Should be absolute path
        (so usually start with "/" or "X:/" depending on the filesystem/os used).
    :param python_callable: A python function with no references to outside variables,
        defined with def, which will be run in a virtual environment.
    :param serializer: Which serializer use to serialize the args and result. It can be one of the following:

        - ``"pickle"``: (default) Use pickle for serialization. Included in the Python Standard Library.
        - ``"cloudpickle"``: Use cloudpickle for serialize more complex types,
          this requires to include cloudpickle in your requirements.
        - ``"dill"``: Use dill for serialize more complex types,
          this requires to include dill in your requirements.
    :param op_args: A list of positional arguments to pass to python_callable.
    :param op_kwargs: A dict of keyword arguments to pass to python_callable.
    :param string_args: Strings that are present in the global var virtualenv_string_args,
        available to python_callable at runtime as a list[str]. Note that args are split
        by newline.
    :param templates_dict: a dictionary where the values are templates that
        will get templated by the Airflow engine sometime between
        ``__init__`` and ``execute`` takes place and are made available
        in your callable's context after the template has been applied
    :param templates_exts: a list of file extensions to resolve while
        processing templated fields, for examples ``['.sql', '.hql']``
    :param expect_airflow: expect Airflow to be installed in the target environment. If true, the operator
        will raise warning if Airflow is not installed, and it will attempt to load Airflow
        macros when starting.
    :param skip_on_exit_code: If python_callable exits with this exit code, leave the task
        in ``skipped`` state (default: None). If set to ``None``, any non-zero
        exit code will be treated as a failure.
    :param env_vars: A dictionary containing additional environment variables to set for the virtual
        environment when it is executed.
    :param inherit_env: Whether to inherit the current environment variables when executing the virtual
        environment. If set to ``True``, the virtual environment will inherit the environment variables
        of the parent process (``os.environ``). If set to ``False``, the virtual environment will be
        executed with a clean environment.
    :param use_dill: Deprecated, use ``serializer`` instead. Whether to use dill to serialize
        the args and result (pickle is default). This allows more complex types
        but requires you to include dill in your requirements.
    """

    template_fields: Sequence[str] = ...
    def __init__(
        self,
        *,
        python: str,
        python_callable: Callable,
        serializer: _SerializerTypeDef | None = ...,
        op_args: Collection[Any] | None = ...,
        op_kwargs: Mapping[str, Any] | None = ...,
        string_args: Iterable[str] | None = ...,
        templates_dict: dict | None = ...,
        templates_exts: list[str] | None = ...,
        expect_airflow: bool = ...,
        expect_pendulum: bool = ...,
        skip_on_exit_code: int | Container[int] | None = ...,
        env_vars: dict[str, str] | None = ...,
        inherit_env: bool = ...,
        use_dill: bool = ...,
        **kwargs,
    ) -> None: ...
    def execute_callable(self):  # -> Any | None:
        ...

class BranchExternalPythonOperator(ExternalPythonOperator, BranchMixIn):
    """
    A workflow can "branch" or follow a path after the execution of this task.

    Extends ExternalPythonOperator, so expects to get Python:
    virtual environment that should be used (in ``VENV/bin`` folder). Should be absolute path,
    so it can run on separate virtual environment similarly to ExternalPythonOperator.

    .. seealso::
        For more information on how to use this operator, take a look at the guide:
        :ref:`howto/operator:BranchExternalPythonOperator`
    """

    def execute(self, context: Context) -> Any: ...

def get_current_context() -> Context:
    """
    Retrieve the execution context dictionary without altering user method's signature.

    This is the simplest method of retrieving the execution context dictionary.

    **Old style:**

    .. code:: python

        def my_task(**context):
            ti = context["ti"]

    **New style:**

    .. code:: python

        from airflow.operators.python import get_current_context


        def my_task():
            context = get_current_context()
            ti = context["ti"]

    Current context will only have value if this method was called after an operator
    was starting to execute.
    """
    ...
