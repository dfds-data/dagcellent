"""
This type stub file was generated by pyright.
"""

import datetime
from collections.abc import Sequence
from typing import TYPE_CHECKING, Any

from airflow.models.baseoperator import BaseOperator
from airflow.models.baseoperatorlink import BaseOperatorLink
from airflow.models.taskinstancekey import TaskInstanceKey
from airflow.utils.context import Context
from airflow.utils.session import provide_session
from airflow.utils.state import DagRunState
from sqlalchemy.orm.session import Session

XCOM_LOGICAL_DATE_ISO = ...
XCOM_RUN_ID = ...
if TYPE_CHECKING: ...

class TriggerDagRunLink(BaseOperatorLink):
    """
    Operator link for TriggerDagRunOperator.

    It allows users to access DAG triggered by task using TriggerDagRunOperator.
    """

    name = ...
    def get_link(self, operator: BaseOperator, *, ti_key: TaskInstanceKey) -> str: ...

class TriggerDagRunOperator(BaseOperator):
    """
    Triggers a DAG run for a specified DAG ID.

    Note that if database isolation mode is enabled, not all features are supported.

    :param trigger_dag_id: The ``dag_id`` of the DAG to trigger (templated).
    :param trigger_run_id: The run ID to use for the triggered DAG run (templated).
        If not provided, a run ID will be automatically generated.
    :param conf: Configuration for the DAG run (templated).
    :param logical_date: Logical date for the triggered DAG (templated).
    :param reset_dag_run: Whether clear existing DAG run if already exists.
        This is useful when backfill or rerun an existing DAG run.
        This only resets (not recreates) the DAG run.
        DAG run conf is immutable and will not be reset on rerun of an existing DAG run.
        When reset_dag_run=False and dag run exists, DagRunAlreadyExists will be raised.
        When reset_dag_run=True and dag run exists, existing DAG run will be cleared to rerun.
    :param wait_for_completion: Whether or not wait for DAG run completion. (default: False)
    :param poke_interval: Poke interval to check DAG run status when wait_for_completion=True.
        (default: 60)
    :param allowed_states: Optional list of allowed DAG run states of the triggered DAG. This is useful when
        setting ``wait_for_completion`` to True. Must be a valid DagRunState.
        Default is ``[DagRunState.SUCCESS]``.
    :param failed_states: Optional list of failed or disallowed DAG run states of the triggered DAG. This is
        useful when setting ``wait_for_completion`` to True. Must be a valid DagRunState.
        Default is ``[DagRunState.FAILED]``.
    :param skip_when_already_exists: Set to true to mark the task as SKIPPED if a DAG run of the triggered
        DAG for the same logical date already exists.
    :param deferrable: If waiting for completion, whether or not to defer the task until done,
        default is ``False``.
    :param execution_date: Deprecated parameter; same as ``logical_date``.
    """

    template_fields: Sequence[str] = ...
    template_fields_renderers = ...
    ui_color = ...
    operator_extra_links = ...
    def __init__(
        self,
        *,
        trigger_dag_id: str,
        trigger_run_id: str | None = ...,
        conf: dict | None = ...,
        logical_date: str | datetime.datetime | None = ...,
        reset_dag_run: bool = ...,
        wait_for_completion: bool = ...,
        poke_interval: int = ...,
        allowed_states: list[str | DagRunState] | None = ...,
        failed_states: list[str | DagRunState] | None = ...,
        skip_when_already_exists: bool = ...,
        deferrable: bool = ...,
        execution_date: str | datetime.datetime | None = ...,
        **kwargs,
    ) -> None: ...
    def execute(self, context: Context):  # -> None:
        ...
    @provide_session
    def execute_complete(
        self, context: Context, session: Session, event: tuple[str, dict[str, Any]]
    ):  # -> None:
        ...
