"""
This type stub file was generated by pyright.
"""

from collections.abc import Collection, Iterable
from typing import TYPE_CHECKING

from airflow.api_internal.internal_api_call import internal_api_call
from airflow.models.base import Base
from airflow.utils.session import provide_session
from sqlalchemy.orm import Session

if TYPE_CHECKING: ...
log = ...

class DagCode(Base):
    """
    A table for DAGs code.

    dag_code table contains code of DAG files synchronized by scheduler.

    For details on dag serialization see SerializedDagModel
    """

    __tablename__ = ...
    fileloc_hash = ...
    fileloc = ...
    last_updated = ...
    source_code = ...
    def __init__(self, full_filepath: str, source_code: str | None = ...) -> None: ...
    @provide_session
    def sync_to_db(self, session: Session = ...) -> None:
        """
        Write code into database.

        :param session: ORM Session
        """
        ...

    @classmethod
    @provide_session
    def bulk_sync_to_db(cls, filelocs: Iterable[str], session: Session = ...) -> None:
        """
        Write code in bulk into database.

        :param filelocs: file paths of DAGs to sync
        :param session: ORM Session
        """
        ...

    @classmethod
    @internal_api_call
    @provide_session
    def remove_deleted_code(
        cls,
        alive_dag_filelocs: Collection[str],
        processor_subdir: str,
        session: Session = ...,
    ) -> None:
        """
        Delete code not included in alive_dag_filelocs.

        :param alive_dag_filelocs: file paths of alive DAGs
        :param processor_subdir: dag processor subdir
        :param session: ORM Session
        """
        ...

    @classmethod
    @provide_session
    def has_dag(cls, fileloc: str, session: Session = ...) -> bool:
        """
        Check a file exist in dag_code table.

        :param fileloc: the file to check
        :param session: ORM Session
        """
        ...

    @classmethod
    def get_code_by_fileloc(cls, fileloc: str) -> str:
        """
        Return source code for a given fileloc.

        :param fileloc: file path of a DAG
        :return: source code as string
        """
        ...

    @classmethod
    @provide_session
    def code(cls, fileloc, session: Session = ...) -> str:
        """
        Return source code for this DagCode object.

        :return: source code as string
        """
        ...

    @staticmethod
    def dag_fileloc_hash(full_filepath: str) -> int:
        """
        Hashing file location for indexing.

        :param full_filepath: full filepath of DAG file
        :return: hashed full_filepath
        """
        ...
