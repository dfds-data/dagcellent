"""
This type stub file was generated by pyright.
"""

from collections.abc import Collection
from datetime import datetime
from typing import TYPE_CHECKING

from airflow.api_internal.internal_api_call import internal_api_call
from airflow.models import Operator
from airflow.models.base import Base
from airflow.models.dag import DAG
from airflow.serialization.dag_dependency import DagDependency
from airflow.serialization.serialized_objects import SerializedDAG
from airflow.utils.session import provide_session
from sqlalchemy.orm import Session

"""Serialized DAG table in database."""
if TYPE_CHECKING: ...
log = ...

class SerializedDagModel(Base):
    """
    A table for serialized DAGs.

    serialized_dag table is a snapshot of DAG files synchronized by scheduler.
    This feature is controlled by:

    * ``[core] min_serialized_dag_update_interval = 30`` (s):
      serialized DAGs are updated in DB when a file gets processed by scheduler,
      to reduce DB write rate, there is a minimal interval of updating serialized DAGs.
    * ``[scheduler] dag_dir_list_interval = 300`` (s):
      interval of deleting serialized DAGs in DB when the files are deleted, suggest
      to use a smaller interval such as 60
    * ``[core] compress_serialized_dags``:
      whether compressing the dag data to the Database.

    It is used by webserver to load dags
    because reading from database is lightweight compared to importing from files,
    it solves the webserver scalability issue.
    """

    __tablename__ = ...
    dag_id = ...
    fileloc = ...
    fileloc_hash = ...
    _data = ...
    _data_compressed = ...
    last_updated = ...
    dag_hash = ...
    processor_subdir = ...
    __table_args__ = ...
    dag_runs = ...
    dag_model = ...
    load_op_links = ...
    def __init__(self, dag: DAG, processor_subdir: str | None = ...) -> None: ...
    def __repr__(self) -> str: ...
    @classmethod
    @provide_session
    def write_dag(
        cls,
        dag: DAG,
        min_update_interval: int | None = ...,
        processor_subdir: str | None = ...,
        session: Session = ...,
    ) -> bool:
        """
        Serialize a DAG and writes it into database.

        If the record already exists, it checks if the Serialized DAG changed or not. If it is
        changed, it updates the record, ignores otherwise.

        :param dag: a DAG to be written into database
        :param min_update_interval: minimal interval in seconds to update serialized DAG
        :param session: ORM Session

        :returns: Boolean indicating if the DAG was written to the DB
        """
        ...

    @classmethod
    @provide_session
    def read_all_dags(cls, session: Session = ...) -> dict[str, SerializedDAG]:
        """
        Read all DAGs in serialized_dag table.

        :param session: ORM Session
        :returns: a dict of DAGs read from database
        """
        ...

    @property
    def data(self) -> dict | None: ...
    @property
    def dag(self) -> SerializedDAG:
        """The DAG deserialized from the ``data`` column."""
        ...

    @classmethod
    @provide_session
    def remove_dag(cls, dag_id: str, session: Session = ...) -> None:
        """
        Delete a DAG with given dag_id.

        :param dag_id: dag_id to be deleted
        :param session: ORM Session.
        """
        ...

    @classmethod
    @internal_api_call
    @provide_session
    def remove_deleted_dags(
        cls,
        alive_dag_filelocs: Collection[str],
        processor_subdir: str | None = ...,
        session: Session = ...,
    ) -> None:
        """
        Delete DAGs not included in alive_dag_filelocs.

        :param alive_dag_filelocs: file paths of alive DAGs
        :param processor_subdir: dag processor subdir
        :param session: ORM Session
        """
        ...

    @classmethod
    @provide_session
    def has_dag(cls, dag_id: str, session: Session = ...) -> bool:
        """
        Check a DAG exist in serialized_dag table.

        :param dag_id: the DAG to check
        :param session: ORM Session
        """
        ...

    @classmethod
    @provide_session
    def get_dag(cls, dag_id: str, session: Session = ...) -> SerializedDAG | None: ...
    @classmethod
    @provide_session
    def get(cls, dag_id: str, session: Session = ...) -> SerializedDagModel | None:
        """
        Get the SerializedDAG for the given dag ID.

        It will cope with being passed the ID of a subdag by looking up the root dag_id from the DAG table.

        :param dag_id: the DAG to fetch
        :param session: ORM Session
        """
        ...

    @staticmethod
    @provide_session
    def bulk_sync_to_db(
        dags: list[DAG], processor_subdir: str | None = ..., session: Session = ...
    ) -> None:
        """
        Save DAGs as Serialized DAG objects in the database.

        Each DAG is saved in a separate database query.

        :param dags: the DAG objects to save to the DB
        :param session: ORM Session
        :return: None
        """
        ...

    @classmethod
    @provide_session
    def get_last_updated_datetime(
        cls, dag_id: str, session: Session = ...
    ) -> datetime | None:
        """
        Get the date when the Serialized DAG associated to DAG was last updated in serialized_dag table.

        :param dag_id: DAG ID
        :param session: ORM Session
        """
        ...

    @classmethod
    @provide_session
    def get_max_last_updated_datetime(cls, session: Session = ...) -> datetime | None:
        """
        Get the maximum date when any DAG was last updated in serialized_dag table.

        :param session: ORM Session
        """
        ...

    @classmethod
    @provide_session
    def get_latest_version_hash(cls, dag_id: str, session: Session = ...) -> str | None:
        """
        Get the latest DAG version for a given DAG ID.

        :param dag_id: DAG ID
        :param session: ORM Session
        :return: DAG Hash, or None if the DAG is not found
        """
        ...

    @classmethod
    def get_latest_version_hash_and_updated_datetime(
        cls, dag_id: str, *, session: Session
    ) -> tuple[str, datetime] | None:
        """
        Get the latest version for a DAG ID and the date it was last updated in serialized_dag table.

        :meta private:
        :param dag_id: DAG ID
        :param session: ORM Session
        :return: A tuple of DAG Hash and last updated datetime, or None if the DAG is not found
        """
        ...

    @classmethod
    @provide_session
    def get_dag_dependencies(
        cls, session: Session = ...
    ) -> dict[str, list[DagDependency]]:
        """
        Get the dependencies between DAGs.

        :param session: ORM Session
        """
        ...

    @staticmethod
    @internal_api_call
    @provide_session
    def get_serialized_dag(
        dag_id: str, task_id: str, session: Session = ...
    ) -> Operator | None: ...
