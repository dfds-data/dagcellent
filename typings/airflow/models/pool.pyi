"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, Any

from airflow.models.base import Base
from airflow.typing_compat import TypedDict
from airflow.utils.session import provide_session
from sqlalchemy.orm.session import Session

if TYPE_CHECKING: ...

class PoolStats(TypedDict):
    """Dictionary containing Pool Stats."""

    total: int
    running: int
    deferred: int
    queued: int
    open: int
    scheduled: int
    ...

class Pool(Base):
    """the class to get Pool info."""

    __tablename__ = ...
    id = ...
    pool = ...
    slots = ...
    description = ...
    include_deferred = ...
    DEFAULT_POOL_NAME = ...
    def __repr__(self):  # -> str:
        ...
    @staticmethod
    @provide_session
    def get_pools(session: Session = ...) -> list[Pool]:
        """Get all pools."""
        ...

    @staticmethod
    @provide_session
    def get_pool(pool_name: str, session: Session = ...) -> Pool | None:
        """
        Get the Pool with specific pool name from the Pools.

        :param pool_name: The pool name of the Pool to get.
        :param session: SQLAlchemy ORM Session
        :return: the pool object
        """
        ...

    @staticmethod
    @provide_session
    def get_default_pool(session: Session = ...) -> Pool | None:
        """
        Get the Pool of the default_pool from the Pools.

        :param session: SQLAlchemy ORM Session
        :return: the pool object
        """
        ...

    @staticmethod
    @provide_session
    def is_default_pool(id: int, session: Session = ...) -> bool:
        """
        Check id if is the default_pool.

        :param id: pool id
        :param session: SQLAlchemy ORM Session
        :return: True if id is default_pool, otherwise False
        """
        ...

    @staticmethod
    @provide_session
    def create_or_update_pool(
        name: str,
        slots: int,
        description: str,
        include_deferred: bool,
        session: Session = ...,
    ) -> Pool:
        """Create a pool with given parameters or update it if it already exists."""
        ...

    @staticmethod
    @provide_session
    def delete_pool(name: str, session: Session = ...) -> Pool:
        """Delete pool by a given name."""
        ...

    @staticmethod
    @provide_session
    def slots_stats(
        *, lock_rows: bool = ..., session: Session = ...
    ) -> dict[str, PoolStats]:
        """
        Get Pool stats (Number of Running, Queued, Open & Total tasks).

        If ``lock_rows`` is True, and the database engine in use supports the ``NOWAIT`` syntax, then a
        non-blocking lock will be attempted -- if the lock is not available then SQLAlchemy will throw an
        OperationalError.

        :param lock_rows: Should we attempt to obtain a row-level lock on all the Pool rows returns
        :param session: SQLAlchemy ORM Session
        """
        ...

    def to_json(self) -> dict[str, Any]:
        """
        Get the Pool in a json structure.

        :return: the pool object in json format
        """
        ...

    @provide_session
    def occupied_slots(self, session: Session = ...) -> int:
        """
        Get the number of slots used by running/queued tasks at the moment.

        :param session: SQLAlchemy ORM Session
        :return: the used number of slots
        """
        ...

    def get_occupied_states(self):  # -> set[TaskInstanceState]:
        ...
    @provide_session
    def running_slots(self, session: Session = ...) -> int:
        """
        Get the number of slots used by running tasks at the moment.

        :param session: SQLAlchemy ORM Session
        :return: the used number of slots
        """
        ...

    @provide_session
    def queued_slots(self, session: Session = ...) -> int:
        """
        Get the number of slots used by queued tasks at the moment.

        :param session: SQLAlchemy ORM Session
        :return: the used number of slots
        """
        ...

    @provide_session
    def scheduled_slots(self, session: Session = ...) -> int:
        """
        Get the number of slots scheduled at the moment.

        :param session: SQLAlchemy ORM Session
        :return: the number of scheduled slots
        """
        ...

    @provide_session
    def deferred_slots(self, session: Session = ...) -> int:
        """
        Get the number of slots deferred at the moment.

        :param session: SQLAlchemy ORM Session
        :return: the number of deferred slots
        """
        ...

    @provide_session
    def open_slots(self, session: Session = ...) -> float:
        """
        Get the number of slots open at the moment.

        :param session: SQLAlchemy ORM Session
        :return: the number of slots
        """
        ...
