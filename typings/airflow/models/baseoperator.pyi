"""
This type stub file was generated by pyright.
"""

import abc
import collections.abc
from collections.abc import Callable, Collection, Iterable, Sequence
from datetime import datetime, timedelta
from functools import total_ordering
from types import ClassMethodDescriptorType, FunctionType
from typing import (
    TYPE_CHECKING,
    Any,
    NoReturn,
    TypeVar,
    Union,
)

import jinja2
import pendulum
from airflow.lineage import apply_lineage, prepare_lineage
from airflow.models.abstractoperator import AbstractOperator, TaskStateChangeCallback
from airflow.models.baseoperatorlink import BaseOperatorLink
from airflow.models.dag import DAG
from airflow.models.mappedoperator import OperatorPartial
from airflow.models.operator import Operator
from airflow.models.param import ParamsDict
from airflow.models.taskinstance import TaskInstance
from airflow.models.taskmixin import DependencyMixin
from airflow.models.xcom_arg import XComArg
from airflow.serialization.enums import DagAttributeTypes
from airflow.task.priority_strategy import PriorityWeightStrategy
from airflow.ti_deps.deps.base_ti_dep import BaseTIDep
from airflow.triggers.base import BaseTrigger, StartTriggerArgs
from airflow.utils.context import Context
from airflow.utils.operator_resources import Resources
from airflow.utils.session import provide_session
from airflow.utils.task_group import TaskGroup
from airflow.utils.types import ArgNotSet
from dateutil.relativedelta import relativedelta
from sqlalchemy.orm import Session

"""
Base operator for all operators.

:sphinx-autoapi-skip:
"""
if TYPE_CHECKING: ...
ScheduleInterval = Union[str, timedelta, relativedelta]
TaskPreExecuteHook = Callable[[Context], None]
TaskPostExecuteHook = Callable[[Context, Any], None]
T = TypeVar("T", bound=FunctionType)
logger = ...

def parse_retries(retries: Any) -> int | None: ...
def coerce_timedelta(value: float | timedelta, *, key: str) -> timedelta: ...
def coerce_resources(resources: dict[str, Any] | None) -> Resources | None: ...
def get_merged_defaults(
    dag: DAG | None,
    task_group: TaskGroup | None,
    task_params: collections.abc.MutableMapping | None,
    task_default_args: dict | None,
) -> tuple[dict, ParamsDict]: ...

class _PartialDescriptor:
    """A descriptor that guards against ``.partial`` being called on Task objects."""

    class_method: ClassMethodDescriptorType | None = ...
    def __get__(
        self, obj: BaseOperator, cls: type[BaseOperator] | None = ...
    ) -> Callable[..., OperatorPartial]: ...

_PARTIAL_DEFAULTS: dict[str, Any] = ...

def partial(
    operator_class: type[BaseOperator],
    *,
    task_id: str,
    dag: DAG | None = ...,
    task_group: TaskGroup | None = ...,
    start_date: datetime | ArgNotSet = ...,
    end_date: datetime | ArgNotSet = ...,
    owner: str | ArgNotSet = ...,
    email: None | str | Iterable[str] | ArgNotSet = ...,
    params: collections.abc.MutableMapping | None = ...,
    resources: dict[str, Any] | None | ArgNotSet = ...,
    trigger_rule: str | ArgNotSet = ...,
    depends_on_past: bool | ArgNotSet = ...,
    ignore_first_depends_on_past: bool | ArgNotSet = ...,
    wait_for_past_depends_before_skipping: bool | ArgNotSet = ...,
    wait_for_downstream: bool | ArgNotSet = ...,
    retries: int | None | ArgNotSet = ...,
    queue: str | ArgNotSet = ...,
    pool: str | ArgNotSet = ...,
    pool_slots: int | ArgNotSet = ...,
    execution_timeout: timedelta | None | ArgNotSet = ...,
    max_retry_delay: None | timedelta | float | ArgNotSet = ...,
    retry_delay: timedelta | float | ArgNotSet = ...,
    retry_exponential_backoff: bool | ArgNotSet = ...,
    priority_weight: int | ArgNotSet = ...,
    weight_rule: str | PriorityWeightStrategy | ArgNotSet = ...,
    sla: timedelta | None | ArgNotSet = ...,
    map_index_template: str | None | ArgNotSet = ...,
    max_active_tis_per_dag: int | None | ArgNotSet = ...,
    max_active_tis_per_dagrun: int | None | ArgNotSet = ...,
    on_execute_callback: None
    | TaskStateChangeCallback
    | list[TaskStateChangeCallback]
    | ArgNotSet = ...,
    on_failure_callback: None
    | TaskStateChangeCallback
    | list[TaskStateChangeCallback]
    | ArgNotSet = ...,
    on_success_callback: None
    | TaskStateChangeCallback
    | list[TaskStateChangeCallback]
    | ArgNotSet = ...,
    on_retry_callback: None
    | TaskStateChangeCallback
    | list[TaskStateChangeCallback]
    | ArgNotSet = ...,
    on_skipped_callback: None
    | TaskStateChangeCallback
    | list[TaskStateChangeCallback]
    | ArgNotSet = ...,
    run_as_user: str | None | ArgNotSet = ...,
    executor: str | None | ArgNotSet = ...,
    executor_config: dict | None | ArgNotSet = ...,
    inlets: Any | None | ArgNotSet = ...,
    outlets: Any | None | ArgNotSet = ...,
    doc: str | None | ArgNotSet = ...,
    doc_md: str | None | ArgNotSet = ...,
    doc_json: str | None | ArgNotSet = ...,
    doc_yaml: str | None | ArgNotSet = ...,
    doc_rst: str | None | ArgNotSet = ...,
    task_display_name: str | None | ArgNotSet = ...,
    logger_name: str | None | ArgNotSet = ...,
    allow_nested_operators: bool = ...,
    **kwargs,
) -> OperatorPartial: ...

class ExecutorSafeguard:
    """
    The ExecutorSafeguard decorator.

    Checks if the execute method of an operator isn't manually called outside
    the TaskInstance as we want to avoid bad mixing between decorated and
    classic operators.
    """

    test_mode = ...
    _sentinel = ...
    @classmethod
    def decorator(
        cls, func
    ):  # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
        ...

class BaseOperatorMeta(abc.ABCMeta):
    """Metaclass of BaseOperator."""

    def __new__(cls, name, bases, namespace, **kwargs):  # -> Self:
        ...

BASEOPERATOR_ARGS_EXPECTED_TYPES = ...

@total_ordering
class BaseOperator(AbstractOperator, metaclass=BaseOperatorMeta):
    r"""
    Abstract base class for all operators.

    Since operators create objects that become nodes in the DAG, BaseOperator
    contains many recursive methods for DAG crawling behavior. To derive from
    this class, you are expected to override the constructor and the 'execute'
    method.

    Operators derived from this class should perform or trigger certain tasks
    synchronously (wait for completion). Example of operators could be an
    operator that runs a Pig job (PigOperator), a sensor operator that
    waits for a partition to land in Hive (HiveSensorOperator), or one that
    moves data from Hive to MySQL (Hive2MySqlOperator). Instances of these
    operators (tasks) target specific operations, running specific scripts,
    functions or data transfers.

    This class is abstract and shouldn't be instantiated. Instantiating a
    class derived from this one results in the creation of a task object,
    which ultimately becomes a node in DAG objects. Task dependencies should
    be set by using the set_upstream and/or set_downstream methods.

    :param task_id: a unique, meaningful id for the task
    :param owner: the owner of the task. Using a meaningful description
        (e.g. user/person/team/role name) to clarify ownership is recommended.
    :param email: the 'to' email address(es) used in email alerts. This can be a
        single email or multiple ones. Multiple addresses can be specified as a
        comma or semicolon separated string or by passing a list of strings.
    :param email_on_retry: Indicates whether email alerts should be sent when a
        task is retried
    :param email_on_failure: Indicates whether email alerts should be sent when
        a task failed
    :param retries: the number of retries that should be performed before
        failing the task
    :param retry_delay: delay between retries, can be set as ``timedelta`` or
        ``float`` seconds, which will be converted into ``timedelta``,
        the default is ``timedelta(seconds=300)``.
    :param retry_exponential_backoff: allow progressively longer waits between
        retries by using exponential backoff algorithm on retry delay (delay
        will be converted into seconds)
    :param max_retry_delay: maximum delay interval between retries, can be set as
        ``timedelta`` or ``float`` seconds, which will be converted into ``timedelta``.
    :param start_date: The ``start_date`` for the task, determines
        the ``execution_date`` for the first task instance. The best practice
        is to have the start_date rounded
        to your DAG's ``schedule_interval``. Daily jobs have their start_date
        some day at 00:00:00, hourly jobs have their start_date at 00:00
        of a specific hour. Note that Airflow simply looks at the latest
        ``execution_date`` and adds the ``schedule_interval`` to determine
        the next ``execution_date``. It is also very important
        to note that different tasks' dependencies
        need to line up in time. If task A depends on task B and their
        start_date are offset in a way that their execution_date don't line
        up, A's dependencies will never be met. If you are looking to delay
        a task, for example running a daily task at 2AM, look into the
        ``TimeSensor`` and ``TimeDeltaSensor``. We advise against using
        dynamic ``start_date`` and recommend using fixed ones. Read the
        FAQ entry about start_date for more information.
    :param end_date: if specified, the scheduler won't go beyond this date
    :param depends_on_past: when set to true, task instances will run
        sequentially and only if the previous instance has succeeded or has been skipped.
        The task instance for the start_date is allowed to run.
    :param wait_for_past_depends_before_skipping: when set to true, if the task instance
        should be marked as skipped, and depends_on_past is true, the ti will stay on None state
        waiting the task of the previous run
    :param wait_for_downstream: when set to true, an instance of task
        X will wait for tasks immediately downstream of the previous instance
        of task X to finish successfully or be skipped before it runs. This is useful if the
        different instances of a task X alter the same asset, and this asset
        is used by tasks downstream of task X. Note that depends_on_past
        is forced to True wherever wait_for_downstream is used. Also note that
        only tasks *immediately* downstream of the previous task instance are waited
        for; the statuses of any tasks further downstream are ignored.
    :param dag: a reference to the dag the task is attached to (if any)
    :param priority_weight: priority weight of this task against other task.
        This allows the executor to trigger higher priority tasks before
        others when things get backed up. Set priority_weight as a higher
        number for more important tasks.
        As not all database engines support 64-bit integers, values are capped with 32-bit.
        Valid range is from -2,147,483,648 to 2,147,483,647.
    :param weight_rule: weighting method used for the effective total
        priority weight of the task. Options are:
        ``{ downstream | upstream | absolute }`` default is ``downstream``
        When set to ``downstream`` the effective weight of the task is the
        aggregate sum of all downstream descendants. As a result, upstream
        tasks will have higher weight and will be scheduled more aggressively
        when using positive weight values. This is useful when you have
        multiple dag run instances and desire to have all upstream tasks to
        complete for all runs before each dag can continue processing
        downstream tasks. When set to ``upstream`` the effective weight is the
        aggregate sum of all upstream ancestors. This is the opposite where
        downstream tasks have higher weight and will be scheduled more
        aggressively when using positive weight values. This is useful when you
        have multiple dag run instances and prefer to have each dag complete
        before starting upstream tasks of other dags.  When set to
        ``absolute``, the effective weight is the exact ``priority_weight``
        specified without additional weighting. You may want to do this when
        you know exactly what priority weight each task should have.
        Additionally, when set to ``absolute``, there is bonus effect of
        significantly speeding up the task creation process as for very large
        DAGs. Options can be set as string or using the constants defined in
        the static class ``airflow.utils.WeightRule``.
        Irrespective of the weight rule, resulting priority values are capped with 32-bit.
        |experimental|
        Since 2.9.0, Airflow allows to define custom priority weight strategy,
        by creating a subclass of
        ``airflow.task.priority_strategy.PriorityWeightStrategy`` and registering
        in a plugin, then providing the class path or the class instance via
        ``weight_rule`` parameter. The custom priority weight strategy will be
        used to calculate the effective total priority weight of the task instance.
    :param queue: which queue to target when running this job. Not
        all executors implement queue management, the CeleryExecutor
        does support targeting specific queues.
    :param pool: the slot pool this task should run in, slot pools are a
        way to limit concurrency for certain tasks
    :param pool_slots: the number of pool slots this task should use (>= 1)
        Values less than 1 are not allowed.
    :param sla: time by which the job is expected to succeed. Note that
        this represents the ``timedelta`` after the period is closed. For
        example if you set an SLA of 1 hour, the scheduler would send an email
        soon after 1:00AM on the ``2016-01-02`` if the ``2016-01-01`` instance
        has not succeeded yet.
        The scheduler pays special attention for jobs with an SLA and
        sends alert
        emails for SLA misses. SLA misses are also recorded in the database
        for future reference. All tasks that share the same SLA time
        get bundled in a single email, sent soon after that time. SLA
        notification are sent once and only once for each task instance.
    :param execution_timeout: max time allowed for the execution of
        this task instance, if it goes beyond it will raise and fail.
    :param on_failure_callback: a function or list of functions to be called when a task instance
        of this task fails. a context dictionary is passed as a single
        parameter to this function. Context contains references to related
        objects to the task instance and is documented under the macros
        section of the API.
    :param on_execute_callback: much like the ``on_failure_callback`` except
        that it is executed right before the task is executed.
    :param on_retry_callback: much like the ``on_failure_callback`` except
        that it is executed when retries occur.
    :param on_success_callback: much like the ``on_failure_callback`` except
        that it is executed when the task succeeds.
    :param on_skipped_callback: much like the ``on_failure_callback`` except
        that it is executed when skipped occur; this callback will be called only if AirflowSkipException get raised.
        Explicitly it is NOT called if a task is not started to be executed because of a preceding branching
        decision in the DAG or a trigger rule which causes execution to skip so that the task execution
        is never scheduled.
    :param pre_execute: a function to be called immediately before task
        execution, receiving a context dictionary; raising an exception will
        prevent the task from being executed.

        |experimental|
    :param post_execute: a function to be called immediately after task
        execution, receiving a context dictionary and task result; raising an
        exception will prevent the task from succeeding.

        |experimental|
    :param trigger_rule: defines the rule by which dependencies are applied
        for the task to get triggered. Options are:
        ``{ all_success | all_failed | all_done | all_skipped | one_success | one_done |
        one_failed | none_failed | none_failed_min_one_success | none_skipped | always}``
        default is ``all_success``. Options can be set as string or
        using the constants defined in the static class
        ``airflow.utils.TriggerRule``
    :param resources: A map of resource parameter names (the argument names of the
        Resources constructor) to their values.
    :param run_as_user: unix username to impersonate while running the task
    :param max_active_tis_per_dag: When set, a task will be able to limit the concurrent
        runs across execution_dates.
    :param max_active_tis_per_dagrun: When set, a task will be able to limit the concurrent
        task instances per DAG run.
    :param executor: Which executor to target when running this task. NOT YET SUPPORTED
    :param executor_config: Additional task-level configuration parameters that are
        interpreted by a specific executor. Parameters are namespaced by the name of
        executor.

        **Example**: to run this task in a specific docker container through
        the KubernetesExecutor ::

            MyOperator(
                ...,
                executor_config={
                    "KubernetesExecutor": {"image": "myCustomDockerImage"}
                },
            )

    :param do_xcom_push: if True, an XCom is pushed containing the Operator's
        result
    :param multiple_outputs: if True and do_xcom_push is True, pushes multiple XComs, one for each
        key in the returned dictionary result. If False and do_xcom_push is True, pushes a single XCom.
    :param task_group: The TaskGroup to which the task should belong. This is typically provided when not
        using a TaskGroup as a context manager.
    :param doc: Add documentation or notes to your Task objects that is visible in
        Task Instance details View in the Webserver
    :param doc_md: Add documentation (in Markdown format) or notes to your Task objects
        that is visible in Task Instance details View in the Webserver
    :param doc_rst: Add documentation (in RST format) or notes to your Task objects
        that is visible in Task Instance details View in the Webserver
    :param doc_json: Add documentation (in JSON format) or notes to your Task objects
        that is visible in Task Instance details View in the Webserver
    :param doc_yaml: Add documentation (in YAML format) or notes to your Task objects
        that is visible in Task Instance details View in the Webserver
    :param task_display_name: The display name of the task which appears on the UI.
    :param logger_name: Name of the logger used by the Operator to emit logs.
        If set to `None` (default), the logger name will fall back to
        `airflow.task.operators.{class.__module__}.{class.__name__}` (e.g. SimpleHttpOperator will have
        *airflow.task.operators.airflow.providers.http.operators.http.SimpleHttpOperator* as logger).
    :param allow_nested_operators: if True, when an operator is executed within another one a warning message
        will be logged. If False, then an exception will be raised if the operator is badly used (e.g. nested
        within another one). In future releases of Airflow this parameter will be removed and an exception
        will always be thrown when operators are nested within each other (default is True).

        **Example**: example of a bad operator mixin usage::

            @task(provide_context=True)
            def say_hello_world(**context):
                hello_world_task = BashOperator(
                    task_id="hello_world_task",
                    bash_command="python -c \"print('Hello, world!')\"",
                    dag=dag,
                )
                hello_world_task.execute(context)
    """

    template_fields: Sequence[str] = ...
    template_ext: Sequence[str] = ...
    template_fields_renderers: dict[str, str] = ...
    ui_color: str = ...
    ui_fgcolor: str = ...
    pool: str = ...
    _base_operator_shallow_copy_attrs: tuple[str, ...] = ...
    shallow_copy_attrs: Sequence[str] = ...
    operator_extra_links: Collection[BaseOperatorLink] = ...
    __serialized_fields: frozenset[str] | None = ...
    partial: Callable[..., OperatorPartial] = ...
    _comps = ...
    supports_lineage = ...
    __instantiated = ...
    __init_kwargs: dict[str, Any]
    _lock_for_execution = ...
    _dag: DAG | None = ...
    task_group: TaskGroup | None = ...
    subdag: DAG | None = ...
    start_date: pendulum.DateTime | None = ...
    end_date: pendulum.DateTime | None = ...
    __from_mapped = ...
    start_trigger_args: StartTriggerArgs | None = ...
    start_from_trigger: bool = ...
    def __init__(
        self,
        task_id: str,
        owner: str = ...,
        email: str | Iterable[str] | None = ...,
        email_on_retry: bool = ...,
        email_on_failure: bool = ...,
        retries: int | None = ...,
        retry_delay: timedelta | float = ...,
        retry_exponential_backoff: bool = ...,
        max_retry_delay: timedelta | float | None = ...,
        start_date: datetime | None = ...,
        end_date: datetime | None = ...,
        depends_on_past: bool = ...,
        ignore_first_depends_on_past: bool = ...,
        wait_for_past_depends_before_skipping: bool = ...,
        wait_for_downstream: bool = ...,
        dag: DAG | None = ...,
        params: collections.abc.MutableMapping | None = ...,
        default_args: dict | None = ...,
        priority_weight: int = ...,
        weight_rule: str | PriorityWeightStrategy = ...,
        queue: str = ...,
        pool: str | None = ...,
        pool_slots: int = ...,
        sla: timedelta | None = ...,
        execution_timeout: timedelta | None = ...,
        on_execute_callback: None
        | TaskStateChangeCallback
        | list[TaskStateChangeCallback] = ...,
        on_failure_callback: None
        | TaskStateChangeCallback
        | list[TaskStateChangeCallback] = ...,
        on_success_callback: None
        | TaskStateChangeCallback
        | list[TaskStateChangeCallback] = ...,
        on_retry_callback: None
        | TaskStateChangeCallback
        | list[TaskStateChangeCallback] = ...,
        on_skipped_callback: None
        | TaskStateChangeCallback
        | list[TaskStateChangeCallback] = ...,
        pre_execute: TaskPreExecuteHook | None = ...,
        post_execute: TaskPostExecuteHook | None = ...,
        trigger_rule: str = ...,
        resources: dict[str, Any] | None = ...,
        run_as_user: str | None = ...,
        task_concurrency: int | None = ...,
        map_index_template: str | None = ...,
        max_active_tis_per_dag: int | None = ...,
        max_active_tis_per_dagrun: int | None = ...,
        executor: str | None = ...,
        executor_config: dict | None = ...,
        do_xcom_push: bool = ...,
        multiple_outputs: bool = ...,
        inlets: Any | None = ...,
        outlets: Any | None = ...,
        task_group: TaskGroup | None = ...,
        doc: str | None = ...,
        doc_md: str | None = ...,
        doc_json: str | None = ...,
        doc_yaml: str | None = ...,
        doc_rst: str | None = ...,
        task_display_name: str | None = ...,
        logger_name: str | None = ...,
        allow_nested_operators: bool = ...,
        **kwargs,
    ) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __or__(self, other):  # -> Self:
        """
        Return [This Operator] | [Operator].

        The inlets of other will be set to pick up the outlets from this operator.
        Other will be set as a downstream task of this operator.
        """
        ...

    def __gt__(self, other) -> bool:
        """
        Return [Operator] > [Outlet].

        If other is an attr annotated object it is set as an outlet of this Operator.
        """
        ...

    def __lt__(self, other) -> bool:
        """
        Return [Inlet] > [Operator] or [Operator] < [Inlet].

        If other is an attr annotated object it is set as an inlet to this operator.
        """
        ...

    def __setattr__(self, key, value):  # -> None:
        ...
    def add_inlets(self, inlets: Iterable[Any]):  # -> None:
        """Set inlets to this operator."""
        ...

    def add_outlets(self, outlets: Iterable[Any]):  # -> None:
        """Define the outlets of this operator."""
        ...

    def get_inlet_defs(self):  # -> list[Any]:
        """
        Get inlet definitions on this task.

        :meta private:
        """
        ...

    def get_outlet_defs(self):  # -> list[Any]:
        """
        Get outlet definitions on this task.

        :meta private:
        """
        ...

    def get_dag(self) -> DAG | None: ...
    @property
    def dag(self) -> DAG:
        """Returns the Operator's DAG if set, otherwise raises an error."""
        ...

    @dag.setter
    def dag(self, dag: DAG | None):  # -> None:
        """Operators can be assigned to one DAG, one time. Repeat assignments to that same DAG are ok."""
        ...

    @property
    def task_display_name(self) -> str: ...
    def has_dag(self):  # -> bool:
        """Return True if the Operator has been assigned to a DAG."""
        ...

    deps: frozenset[BaseTIDep] = ...
    def prepare_for_execution(self) -> BaseOperator:
        """Lock task for execution to disable custom action in ``__setattr__`` and return a copy."""
        ...

    def set_xcomargs_dependencies(self) -> None:
        """
        Resolve upstream dependencies of a task.

        In this way passing an ``XComArg`` as value for a template field
        will result in creating upstream relation between two tasks.

        **Example**: ::

            with DAG(...):
                generate_content = GenerateContentOperator(task_id="generate_content")
                send_email = EmailOperator(..., html_content=generate_content.output)

            # This is equivalent to
            with DAG(...):
                generate_content = GenerateContentOperator(task_id="generate_content")
                send_email = EmailOperator(
                    ...,
                    html_content="{{ task_instance.xcom_pull('generate_content') }}",
                )
                generate_content >> send_email

        """
        ...

    @prepare_lineage
    def pre_execute(self, context: Any):  # -> None:
        """Execute right before self.execute() is called."""
        ...

    def execute(self, context: Context) -> Any:
        """
        Derive when creating an operator.

        Context is the same dictionary used as when rendering jinja templates.

        Refer to get_template_context for more context.
        """
        ...

    @apply_lineage
    def post_execute(self, context: Any, result: Any = ...):  # -> None:
        """
        Execute right after self.execute() is called.

        It is passed the execution context and any results returned by the operator.
        """
        ...

    def on_kill(self) -> None:
        """
        Override this method to clean up subprocesses when a task instance gets killed.

        Any use of the threading, subprocess or multiprocessing module within an
        operator needs to be cleaned up, or it will leave ghost processes behind.
        """
        ...

    def __deepcopy__(self, memo):  # -> Self:
        ...
    def __getstate__(self):  # -> dict[str, Any]:
        ...
    def __setstate__(self, state):  # -> None:
        ...
    def render_template_fields(
        self, context: Context, jinja_env: jinja2.Environment | None = ...
    ) -> None:
        """
        Template all attributes listed in *self.template_fields*.

        This mutates the attributes in-place and is irreversible.

        :param context: Context dict with values to apply on content.
        :param jinja_env: Jinja's environment to use for rendering.
        """
        ...

    @provide_session
    def clear(
        self,
        start_date: datetime | None = ...,
        end_date: datetime | None = ...,
        upstream: bool = ...,
        downstream: bool = ...,
        session: Session = ...,
    ):  # -> int:
        """Clear the state of task instances associated with the task, following the parameters specified."""
        ...

    @provide_session
    def get_task_instances(
        self,
        start_date: datetime | None = ...,
        end_date: datetime | None = ...,
        session: Session = ...,
    ) -> list[TaskInstance]:
        """Get task instances related to this task for a specific date range."""
        ...

    @provide_session
    def run(
        self,
        start_date: datetime | None = ...,
        end_date: datetime | None = ...,
        ignore_first_depends_on_past: bool = ...,
        wait_for_past_depends_before_skipping: bool = ...,
        ignore_ti_state: bool = ...,
        mark_success: bool = ...,
        test_mode: bool = ...,
        session: Session = ...,
    ) -> None:
        """Run a set of task instances for a date range."""
        ...

    def dry_run(self) -> None:
        """Perform dry run for the operator - just render template fields."""
        ...

    def get_direct_relatives(self, upstream: bool = ...) -> Iterable[Operator]:
        """Get list of the direct relatives to the current task, upstream or downstream."""
        ...

    def __repr__(self):  # -> str:
        ...
    @property
    def operator_class(self) -> type[BaseOperator]: ...
    @property
    def task_type(self) -> str:
        """@property: type of the task."""
        ...

    @property
    def operator_name(self) -> str:
        """@property: use a more friendly display name for the operator, if set."""
        ...

    @property
    def roots(self) -> list[BaseOperator]:
        """Required by DAGNode."""
        ...

    @property
    def leaves(self) -> list[BaseOperator]:
        """Required by DAGNode."""
        ...

    @property
    def output(self) -> XComArg:
        """Returns reference to XCom pushed by current operator."""
        ...

    @property
    def is_setup(self) -> bool:
        """
        Whether the operator is a setup task.

        :meta private:
        """
        ...

    @is_setup.setter
    def is_setup(self, value: bool) -> None:
        """
        Setter for is_setup property.

        :meta private:
        """
        ...

    @property
    def is_teardown(self) -> bool:
        """
        Whether the operator is a teardown task.

        :meta private:
        """
        ...

    @is_teardown.setter
    def is_teardown(self, value: bool) -> None:
        """
        Setter for is_teardown property.

        :meta private:
        """
        ...

    @staticmethod
    def xcom_push(
        context: Any, key: str, value: Any, execution_date: datetime | None = ...
    ) -> None:
        """
        Make an XCom available for tasks to pull.

        :param context: Execution Context Dictionary
        :param key: A key for the XCom
        :param value: A value for the XCom. The value is pickled and stored
            in the database.
        :param execution_date: if provided, the XCom will not be visible until
            this date. This can be used, for example, to send a message to a
            task on a future date without it being immediately visible.
        """
        ...

    @staticmethod
    @provide_session
    def xcom_pull(
        context: Any,
        task_ids: str | list[str] | None = ...,
        dag_id: str | None = ...,
        key: str = ...,
        include_prior_dates: bool | None = ...,
        session: Session = ...,
    ) -> Any:
        """
        Pull XComs that optionally meet certain criteria.

        The default value for `key` limits the search to XComs
        that were returned by other tasks (as opposed to those that were pushed
        manually). To remove this filter, pass key=None (or any desired value).

        If a single task_id string is provided, the result is the value of the
        most recent matching XCom from that task_id. If multiple task_ids are
        provided, a tuple of matching values is returned. None is returned
        whenever no matches are found.

        :param context: Execution Context Dictionary
        :param key: A key for the XCom. If provided, only XComs with matching
            keys will be returned. The default key is 'return_value', also
            available as a constant XCOM_RETURN_KEY. This key is automatically
            given to XComs returned by tasks (as opposed to being pushed
            manually). To remove the filter, pass key=None.
        :param task_ids: Only XComs from tasks with matching ids will be
            pulled. Can pass None to remove the filter.
        :param dag_id: If provided, only pulls XComs from this DAG.
            If None (default), the DAG of the calling task is used.
        :param include_prior_dates: If False, only XComs from the current
            execution_date are returned. If True, XComs from previous dates
            are returned as well.
        """
        ...

    @classmethod
    def get_serialized_fields(cls):  # -> frozenset[str]:
        """Stringified DAGs and operators contain exactly these fields."""
        ...

    def serialize_for_task_group(self) -> tuple[DagAttributeTypes, Any]:
        """Serialize; required by DAGNode."""
        ...

    @property
    def inherits_from_empty_operator(self):  # -> Any | bool:
        """Used to determine if an Operator is inherited from EmptyOperator."""
        ...

    def defer(
        self,
        *,
        trigger: BaseTrigger,
        method_name: str,
        kwargs: dict[str, Any] | None = ...,
        timeout: timedelta | None = ...,
    ) -> NoReturn:
        """
        Mark this Operator "deferred", suspending its execution until the provided trigger fires an event.

        This is achieved by raising a special exception (TaskDeferred)
        which is caught in the main _execute_task wrapper. Triggers can send execution back to task or end
        the task instance directly. If the trigger will end the task instance itself, ``method_name`` should
        be None; otherwise, provide the name of the method that should be used when resuming execution in
        the task.
        """
        ...

    def resume_execution(
        self, next_method: str, next_kwargs: dict[str, Any] | None, context: Context
    ):  # -> Any:
        """Call this method when a deferred task is resumed."""
        ...

    def unmap(
        self, resolve: None | dict[str, Any] | tuple[Context, Session]
    ) -> BaseOperator:
        """
        Get the "normal" operator from the current operator.

        Since a BaseOperator is not mapped to begin with, this simply returns
        the original operator.

        :meta private:
        """
        ...

    def expand_start_from_trigger(self, *, context: Context, session: Session) -> bool:
        """
        Get the start_from_trigger value of the current abstract operator.

        Since a BaseOperator is not mapped to begin with, this simply returns
        the original value of start_from_trigger.

        :meta private:
        """
        ...

    def expand_start_trigger_args(
        self, *, context: Context, session: Session
    ) -> StartTriggerArgs | None:
        """
        Get the start_trigger_args value of the current abstract operator.

        Since a BaseOperator is not mapped to begin with, this simply returns
        the original value of start_trigger_args.

        :meta private:
        """
        ...

Chainable = Union[DependencyMixin, Sequence[DependencyMixin]]

def chain(*tasks: DependencyMixin | Sequence[DependencyMixin]) -> None:
    r"""
    Given a number of tasks, builds a dependency chain.

    This function accepts values of BaseOperator (aka tasks), EdgeModifiers (aka Labels), XComArg, TaskGroups,
    or lists containing any mix of these types (or a mix in the same list). If you want to chain between two
    lists you must ensure they have the same length.

    Using classic operators/sensors:

    .. code-block:: python

        chain(t1, [t2, t3], [t4, t5], t6)

    is equivalent to::

          / -> t2 -> t4 \
        t1               -> t6
          \ -> t3 -> t5 /

    .. code-block:: python

        t1.set_downstream(t2)
        t1.set_downstream(t3)
        t2.set_downstream(t4)
        t3.set_downstream(t5)
        t4.set_downstream(t6)
        t5.set_downstream(t6)

    Using task-decorated functions aka XComArgs:

    .. code-block:: python

        chain(x1(), [x2(), x3()], [x4(), x5()], x6())

    is equivalent to::

          / -> x2 -> x4 \
        x1               -> x6
          \ -> x3 -> x5 /

    .. code-block:: python

        x1 = x1()
        x2 = x2()
        x3 = x3()
        x4 = x4()
        x5 = x5()
        x6 = x6()
        x1.set_downstream(x2)
        x1.set_downstream(x3)
        x2.set_downstream(x4)
        x3.set_downstream(x5)
        x4.set_downstream(x6)
        x5.set_downstream(x6)

    Using TaskGroups:

    .. code-block:: python

        chain(t1, task_group1, task_group2, t2)

        t1.set_downstream(task_group1)
        task_group1.set_downstream(task_group2)
        task_group2.set_downstream(t2)


    It is also possible to mix between classic operator/sensor, EdgeModifiers, XComArg, and TaskGroups:

    .. code-block:: python

        chain(t1, [Label("branch one"), Label("branch two")], [x1(), x2()], task_group1, x3())

    is equivalent to::

          / "branch one" -> x1 \
        t1                      -> task_group1 -> x3
          \ "branch two" -> x2 /

    .. code-block:: python

        x1 = x1()
        x2 = x2()
        x3 = x3()
        label1 = Label("branch one")
        label2 = Label("branch two")
        t1.set_downstream(label1)
        label1.set_downstream(x1)
        t2.set_downstream(label2)
        label2.set_downstream(x2)
        x1.set_downstream(task_group1)
        x2.set_downstream(task_group1)
        task_group1.set_downstream(x3)

        # or

        x1 = x1()
        x2 = x2()
        x3 = x3()
        t1.set_downstream(x1, edge_modifier=Label("branch one"))
        t1.set_downstream(x2, edge_modifier=Label("branch two"))
        x1.set_downstream(task_group1)
        x2.set_downstream(task_group1)
        task_group1.set_downstream(x3)


    :param tasks: Individual and/or list of tasks, EdgeModifiers, XComArgs, or TaskGroups to set dependencies
    """
    ...

def cross_downstream(
    from_tasks: Sequence[DependencyMixin],
    to_tasks: DependencyMixin | Sequence[DependencyMixin],
):  # -> None:
    r"""
    Set downstream dependencies for all tasks in from_tasks to all tasks in to_tasks.

    Using classic operators/sensors:

    .. code-block:: python

        cross_downstream(from_tasks=[t1, t2, t3], to_tasks=[t4, t5, t6])

    is equivalent to::

        t1 ---> t4
           \ /
        t2 -X -> t5
           / \
        t3 ---> t6

    .. code-block:: python

        t1.set_downstream(t4)
        t1.set_downstream(t5)
        t1.set_downstream(t6)
        t2.set_downstream(t4)
        t2.set_downstream(t5)
        t2.set_downstream(t6)
        t3.set_downstream(t4)
        t3.set_downstream(t5)
        t3.set_downstream(t6)

    Using task-decorated functions aka XComArgs:

    .. code-block:: python

        cross_downstream(from_tasks=[x1(), x2(), x3()], to_tasks=[x4(), x5(), x6()])

    is equivalent to::

        x1 ---> x4
           \ /
        x2 -X -> x5
           / \
        x3 ---> x6

    .. code-block:: python

        x1 = x1()
        x2 = x2()
        x3 = x3()
        x4 = x4()
        x5 = x5()
        x6 = x6()
        x1.set_downstream(x4)
        x1.set_downstream(x5)
        x1.set_downstream(x6)
        x2.set_downstream(x4)
        x2.set_downstream(x5)
        x2.set_downstream(x6)
        x3.set_downstream(x4)
        x3.set_downstream(x5)
        x3.set_downstream(x6)

    It is also possible to mix between classic operator/sensor and XComArg tasks:

    .. code-block:: python

        cross_downstream(from_tasks=[t1, x2(), t3], to_tasks=[x1(), t2, x3()])

    is equivalent to::

        t1 ---> x1
           \ /
        x2 -X -> t2
           / \
        t3 ---> x3

    .. code-block:: python

        x1 = x1()
        x2 = x2()
        x3 = x3()
        t1.set_downstream(x1)
        t1.set_downstream(t2)
        t1.set_downstream(x3)
        x2.set_downstream(x1)
        x2.set_downstream(t2)
        x2.set_downstream(x3)
        t3.set_downstream(x1)
        t3.set_downstream(t2)
        t3.set_downstream(x3)

    :param from_tasks: List of tasks or XComArgs to start from.
    :param to_tasks: List of tasks or XComArgs to set as downstream dependencies.
    """
    ...

def chain_linear(*elements: DependencyMixin | Sequence[DependencyMixin]):  # -> None:
    """
    Simplify task dependency definition.

    E.g.: suppose you want precedence like so::

            ╭─op2─╮ ╭─op4─╮
        op1─┤     ├─├─op5─┤─op7
            ╰-op3─╯ ╰-op6─╯

    Then you can accomplish like so::

        chain_linear(op1, [op2, op3], [op4, op5, op6], op7)

    :param elements: a list of operators / lists of operators
    """
    ...

def __getattr__(name):  # -> Any:
    """
    PEP-562: Lazy loaded attributes on python modules.

    :meta private:
    """
    ...

__deprecated_imports = ...
