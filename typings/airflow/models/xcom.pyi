"""
This type stub file was generated by pyright.
"""

import datetime
from collections.abc import Iterable
from typing import TYPE_CHECKING, Any, overload

import pendulum
from airflow.api_internal.internal_api_call import internal_api_call
from airflow.models.base import TaskInstanceDependencies
from airflow.models.taskinstancekey import TaskInstanceKey
from airflow.utils.db import LazySelectSequence
from airflow.utils.log.logging_mixin import LoggingMixin
from airflow.utils.session import provide_session
from sqlalchemy.orm import Query, Session, reconstructor

log = ...
if TYPE_CHECKING: ...

class BaseXCom(TaskInstanceDependencies, LoggingMixin):
    """Base class for XCom objects."""

    __tablename__ = ...
    dag_run_id = ...
    task_id = ...
    map_index = ...
    key = ...
    dag_id = ...
    run_id = ...
    value = ...
    timestamp = ...
    __table_args__ = ...
    dag_run = ...
    execution_date = ...
    @reconstructor
    def init_on_load(self):  # -> None:
        """
        Execute after the instance has been loaded from the DB or otherwise reconstituted; called by the ORM.

        i.e automatically deserialize Xcom value when loading from DB.
        """
        ...

    def __repr__(self):  # -> str:
        ...
    @overload
    @classmethod
    def set(
        cls,
        key: str,
        value: Any,
        *,
        dag_id: str,
        task_id: str,
        run_id: str,
        map_index: int = ...,
        session: Session = ...,
    ) -> None:
        """
        Store an XCom value.

        A deprecated form of this function accepts ``execution_date`` instead of
        ``run_id``. The two arguments are mutually exclusive.

        :param key: Key to store the XCom.
        :param value: XCom value to store.
        :param dag_id: DAG ID.
        :param task_id: Task ID.
        :param run_id: DAG run ID for the task.
        :param map_index: Optional map index to assign XCom for a mapped task.
            The default is ``-1`` (set for a non-mapped task).
        :param session: Database session. If not given, a new session will be
            created for this function.
        """
        ...

    @overload
    @classmethod
    def set(
        cls,
        key: str,
        value: Any,
        task_id: str,
        dag_id: str,
        execution_date: datetime.datetime,
        session: Session = ...,
    ) -> None:
        """
        Store an XCom value.

        :sphinx-autoapi-skip:
        """
        ...

    @classmethod
    @internal_api_call
    @provide_session
    def set(
        cls,
        key: str,
        value: Any,
        task_id: str,
        dag_id: str,
        execution_date: datetime.datetime | None = ...,
        session: Session = ...,
        *,
        run_id: str | None = ...,
        map_index: int = ...,
    ) -> None:
        """
        Store an XCom value.

        :sphinx-autoapi-skip:
        """
        ...

    @staticmethod
    @provide_session
    @internal_api_call
    def get_value(
        *, ti_key: TaskInstanceKey, key: str | None = ..., session: Session = ...
    ) -> Any:
        """
        Retrieve an XCom value for a task instance.

        This method returns "full" XCom values (i.e. uses ``deserialize_value``
        from the XCom backend). Use :meth:`get_many` if you want the "shortened"
        value via ``orm_deserialize_value``.

        If there are no results, *None* is returned. If multiple XCom entries
        match the criteria, an arbitrary one is returned.

        :param ti_key: The TaskInstanceKey to look up the XCom for.
        :param key: A key for the XCom. If provided, only XCom with matching
            keys will be returned. Pass *None* (default) to remove the filter.
        :param session: Database session. If not given, a new session will be
            created for this function.
        """
        ...

    @overload
    @staticmethod
    @internal_api_call
    def get_one(
        *,
        key: str | None = ...,
        dag_id: str | None = ...,
        task_id: str | None = ...,
        run_id: str | None = ...,
        map_index: int | None = ...,
        session: Session = ...,
    ) -> Any | None:
        """
        Retrieve an XCom value, optionally meeting certain criteria.

        This method returns "full" XCom values (i.e. uses ``deserialize_value``
        from the XCom backend). Use :meth:`get_many` if you want the "shortened"
        value via ``orm_deserialize_value``.

        If there are no results, *None* is returned. If multiple XCom entries
        match the criteria, an arbitrary one is returned.

        A deprecated form of this function accepts ``execution_date`` instead of
        ``run_id``. The two arguments are mutually exclusive.

        .. seealso:: ``get_value()`` is a convenience function if you already
            have a structured TaskInstance or TaskInstanceKey object available.

        :param run_id: DAG run ID for the task.
        :param dag_id: Only pull XCom from this DAG. Pass *None* (default) to
            remove the filter.
        :param task_id: Only XCom from task with matching ID will be pulled.
            Pass *None* (default) to remove the filter.
        :param map_index: Only XCom from task with matching ID will be pulled.
            Pass *None* (default) to remove the filter.
        :param key: A key for the XCom. If provided, only XCom with matching
            keys will be returned. Pass *None* (default) to remove the filter.
        :param include_prior_dates: If *False* (default), only XCom from the
            specified DAG run is returned. If *True*, the latest matching XCom is
            returned regardless of the run it belongs to.
        :param session: Database session. If not given, a new session will be
            created for this function.
        """
        ...

    @overload
    @staticmethod
    @internal_api_call
    def get_one(
        execution_date: datetime.datetime,
        key: str | None = ...,
        task_id: str | None = ...,
        dag_id: str | None = ...,
        include_prior_dates: bool = ...,
        session: Session = ...,
    ) -> Any | None:
        """
        Retrieve an XCom value, optionally meeting certain criteria.

        :sphinx-autoapi-skip:
        """
        ...

    @staticmethod
    @provide_session
    @internal_api_call
    def get_one(
        execution_date: datetime.datetime | None = ...,
        key: str | None = ...,
        task_id: str | None = ...,
        dag_id: str | None = ...,
        include_prior_dates: bool = ...,
        session: Session = ...,
        *,
        run_id: str | None = ...,
        map_index: int | None = ...,
    ) -> Any | None:
        """
        Retrieve an XCom value, optionally meeting certain criteria.

        :sphinx-autoapi-skip:
        """
        ...

    @overload
    @staticmethod
    def get_many(
        *,
        run_id: str,
        key: str | None = ...,
        task_ids: str | Iterable[str] | None = ...,
        dag_ids: str | Iterable[str] | None = ...,
        map_indexes: int | Iterable[int] | None = ...,
        include_prior_dates: bool = ...,
        limit: int | None = ...,
        session: Session = ...,
    ) -> Query:
        """
        Composes a query to get one or more XCom entries.

        This function returns an SQLAlchemy query of full XCom objects. If you
        just want one stored value, use :meth:`get_one` instead.

        A deprecated form of this function accepts ``execution_date`` instead of
        ``run_id``. The two arguments are mutually exclusive.

        :param run_id: DAG run ID for the task.
        :param key: A key for the XComs. If provided, only XComs with matching
            keys will be returned. Pass *None* (default) to remove the filter.
        :param task_ids: Only XComs from task with matching IDs will be pulled.
            Pass *None* (default) to remove the filter.
        :param dag_ids: Only pulls XComs from specified DAGs. Pass *None*
            (default) to remove the filter.
        :param map_indexes: Only XComs from matching map indexes will be pulled.
            Pass *None* (default) to remove the filter.
        :param include_prior_dates: If *False* (default), only XComs from the
            specified DAG run are returned. If *True*, all matching XComs are
            returned regardless of the run it belongs to.
        :param session: Database session. If not given, a new session will be
            created for this function.
        :param limit: Limiting returning XComs
        """
        ...

    @overload
    @staticmethod
    @internal_api_call
    def get_many(
        execution_date: datetime.datetime,
        key: str | None = ...,
        task_ids: str | Iterable[str] | None = ...,
        dag_ids: str | Iterable[str] | None = ...,
        map_indexes: int | Iterable[int] | None = ...,
        include_prior_dates: bool = ...,
        limit: int | None = ...,
        session: Session = ...,
    ) -> Query:
        """
        Composes a query to get one or more XCom entries.

        :sphinx-autoapi-skip:
        """
        ...

    @staticmethod
    @provide_session
    def get_many(
        execution_date: datetime.datetime | None = ...,
        key: str | None = ...,
        task_ids: str | Iterable[str] | None = ...,
        dag_ids: str | Iterable[str] | None = ...,
        map_indexes: int | Iterable[int] | None = ...,
        include_prior_dates: bool = ...,
        limit: int | None = ...,
        session: Session = ...,
        *,
        run_id: str | None = ...,
    ) -> Query:
        """
        Composes a query to get one or more XCom entries.

        :sphinx-autoapi-skip:
        """
        ...

    @classmethod
    @provide_session
    def delete(cls, xcoms: XCom | Iterable[XCom], session: Session) -> None:
        """Delete one or multiple XCom entries."""
        ...

    @staticmethod
    def purge(xcom: XCom, session: Session) -> None:
        """Purge an XCom entry from underlying storage implementations."""
        ...

    @overload
    @staticmethod
    @internal_api_call
    def clear(
        *,
        dag_id: str,
        task_id: str,
        run_id: str,
        map_index: int | None = ...,
        session: Session = ...,
    ) -> None:
        """
        Clear all XCom data from the database for the given task instance.

        A deprecated form of this function accepts ``execution_date`` instead of
        ``run_id``. The two arguments are mutually exclusive.

        :param dag_id: ID of DAG to clear the XCom for.
        :param task_id: ID of task to clear the XCom for.
        :param run_id: ID of DAG run to clear the XCom for.
        :param map_index: If given, only clear XCom from this particular mapped
            task. The default ``None`` clears *all* XComs from the task.
        :param session: Database session. If not given, a new session will be
            created for this function.
        """
        ...

    @overload
    @staticmethod
    @internal_api_call
    def clear(
        execution_date: pendulum.DateTime,
        dag_id: str,
        task_id: str,
        session: Session = ...,
    ) -> None:
        """
        Clear all XCom data from the database for the given task instance.

        :sphinx-autoapi-skip:
        """
        ...

    @staticmethod
    @provide_session
    @internal_api_call
    def clear(
        execution_date: pendulum.DateTime | None = ...,
        dag_id: str | None = ...,
        task_id: str | None = ...,
        session: Session = ...,
        *,
        run_id: str | None = ...,
        map_index: int | None = ...,
    ) -> None:
        """
        Clear all XCom data from the database for the given task instance.

        :sphinx-autoapi-skip:
        """
        ...

    @staticmethod
    def serialize_value(
        value: Any,
        *,
        key: str | None = ...,
        task_id: str | None = ...,
        dag_id: str | None = ...,
        run_id: str | None = ...,
        map_index: int | None = ...,
    ) -> Any:
        """Serialize XCom value to str or pickled object."""
        ...

    @staticmethod
    def deserialize_value(result: XCom) -> Any:
        """Deserialize XCom value from str or pickle object."""
        ...

    def orm_deserialize_value(self) -> Any:
        """
        Deserialize method which is used to reconstruct ORM XCom object.

        This method should be overridden in custom XCom backends to avoid
        unnecessary request or other resource consuming operations when
        creating XCom orm model. This is used when viewing XCom listing
        in the webserver, for example.
        """
        ...

class LazyXComSelectSequence(LazySelectSequence[Any]):
    """
    List-like interface to lazily access XCom values.

    :meta private:
    """

    ...

def resolve_xcom_backend() -> type[BaseXCom]:
    """
    Resolve custom XCom class.

    Confirm that custom XCom class extends the BaseXCom.
    Compare the function signature of the custom XCom serialize_value to the base XCom serialize_value.
    """
    ...

if TYPE_CHECKING:
    XCom = BaseXCom
else: ...
