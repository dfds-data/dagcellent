"""
This type stub file was generated by pyright.
"""

import datetime
from typing import TYPE_CHECKING

from airflow.models.base import TaskInstanceDependencies
from airflow.models.taskinstance import TaskInstance
from airflow.serialization.pydantic.taskinstance import TaskInstancePydantic
from airflow.utils.session import provide_session
from sqlalchemy.orm import Query, Session
from sqlalchemy.sql import Select

"""TaskReschedule tracks rescheduled task instances."""
if TYPE_CHECKING: ...

class TaskReschedule(TaskInstanceDependencies):
    """TaskReschedule tracks rescheduled task instances."""

    __tablename__ = ...
    id = ...
    task_id = ...
    dag_id = ...
    run_id = ...
    map_index = ...
    try_number = ...
    start_date = ...
    end_date = ...
    duration = ...
    reschedule_date = ...
    __table_args__ = ...
    dag_run = ...
    execution_date = ...
    def __init__(
        self,
        task_id: str,
        dag_id: str,
        run_id: str,
        try_number: int,
        start_date: datetime.datetime,
        end_date: datetime.datetime,
        reschedule_date: datetime.datetime,
        map_index: int = ...,
    ) -> None: ...
    @classmethod
    def stmt_for_task_instance(
        cls,
        ti: TaskInstance | TaskInstancePydantic,
        *,
        try_number: int | None = ...,
        descending: bool = ...,
    ) -> Select:
        """
        Statement for task reschedules for a given the task instance.

        :param ti: the task instance to find task reschedules for
        :param descending: If True then records are returned in descending order
        :param try_number: Look for TaskReschedule of the given try_number. Default is None which
            looks for the same try_number of the given task_instance.
        :meta private:
        """
        ...

    @staticmethod
    @provide_session
    def query_for_task_instance(
        task_instance: TaskInstance,
        descending: bool = ...,
        session: Session = ...,
        try_number: int | None = ...,
    ) -> Query:
        """
        Return query for task reschedules for a given the task instance (deprecated).

        :param session: the database session object
        :param task_instance: the task instance to find task reschedules for
        :param descending: If True then records are returned in descending order
        :param try_number: Look for TaskReschedule of the given try_number. Default is None which
            looks for the same try_number of the given task_instance.
        """
        ...

    @staticmethod
    @provide_session
    def find_for_task_instance(
        task_instance: TaskInstance,
        session: Session = ...,
        try_number: int | None = ...,
    ) -> list[TaskReschedule]:
        """
        Return all task reschedules for the task instance and try number, in ascending order.

        :param session: the database session object
        :param task_instance: the task instance to find task reschedules for
        :param try_number: Look for TaskReschedule of the given try_number. Default is None which
            looks for the same try_number of the given task_instance.
        """
        ...
