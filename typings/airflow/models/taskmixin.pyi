"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta, abstractmethod
from collections.abc import Iterable, Sequence
from logging import Logger
from typing import TYPE_CHECKING, Any

import pendulum
from airflow.models.baseoperator import BaseOperator
from airflow.models.dag import DAG
from airflow.models.operator import Operator
from airflow.serialization.enums import DagAttributeTypes
from airflow.utils.edgemodifier import EdgeModifier
from airflow.utils.task_group import TaskGroup
from airflow.utils.types import ArgNotSet

if TYPE_CHECKING: ...

class DependencyMixin:
    """Mixing implementing common dependency setting methods like >> and <<."""

    @property
    def roots(self) -> Sequence[DependencyMixin]:
        """
        List of root nodes -- ones with no upstream dependencies.

        a.k.a. the "start" of this sub-graph
        """
        ...

    @property
    def leaves(self) -> Sequence[DependencyMixin]:
        """
        List of leaf nodes -- ones with only upstream dependencies.

        a.k.a. the "end" of this sub-graph
        """
        ...

    @abstractmethod
    def set_upstream(
        self,
        other: DependencyMixin | Sequence[DependencyMixin],
        edge_modifier: EdgeModifier | None = ...,
    ):
        """Set a task or a task list to be directly upstream from the current task."""
        ...

    @abstractmethod
    def set_downstream(
        self,
        other: DependencyMixin | Sequence[DependencyMixin],
        edge_modifier: EdgeModifier | None = ...,
    ):
        """Set a task or a task list to be directly downstream from the current task."""
        ...

    def as_setup(self) -> DependencyMixin:
        """Mark a task as setup task."""
        ...

    def as_teardown(
        self,
        *,
        setups: BaseOperator | Iterable[BaseOperator] | ArgNotSet = ...,
        on_failure_fail_dagrun=...,
    ) -> DependencyMixin:
        """Mark a task as teardown and set its setups as direct relatives."""
        ...

    def update_relative(
        self,
        other: DependencyMixin,
        upstream: bool = ...,
        edge_modifier: EdgeModifier | None = ...,
    ) -> None:
        """
        Update relationship information about another TaskMixin. Default is no-op.

        Override if necessary.
        """
        ...

    def __lshift__(
        self, other: DependencyMixin | Sequence[DependencyMixin]
    ):  # -> DependencyMixin | Sequence[DependencyMixin]:
        """Implement Task << Task."""
        ...

    def __rshift__(
        self, other: DependencyMixin | Sequence[DependencyMixin]
    ):  # -> DependencyMixin | Sequence[DependencyMixin]:
        """Implement Task >> Task."""
        ...

    def __rrshift__(
        self, other: DependencyMixin | Sequence[DependencyMixin]
    ):  # -> Self:
        """Implement Task >> [Task] because list don't have __rshift__ operators."""
        ...

    def __rlshift__(
        self, other: DependencyMixin | Sequence[DependencyMixin]
    ):  # -> Self:
        """Implement Task << [Task] because list don't have __lshift__ operators."""
        ...

class TaskMixin(DependencyMixin):
    """
    Mixin to provide task-related things.

    :meta private:
    """

    def __init_subclass__(cls) -> None: ...

class DAGNode(DependencyMixin, metaclass=ABCMeta):
    """
    A base class for a node in the graph of a workflow.

    A node may be an Operator or a Task Group, either mapped or unmapped.
    """

    dag: DAG | None = ...
    task_group: TaskGroup | None = ...
    @property
    @abstractmethod
    def node_id(self) -> str: ...
    @property
    def label(self) -> str | None: ...

    start_date: pendulum.DateTime | None
    end_date: pendulum.DateTime | None
    upstream_task_ids: set[str]
    downstream_task_ids: set[str]
    def has_dag(self) -> bool: ...
    @property
    def dag_id(self) -> str:
        """Returns dag id if it has one or an adhoc/meaningless ID."""
        ...

    @property
    def log(self) -> Logger: ...
    @property
    @abstractmethod
    def roots(self) -> Sequence[DAGNode]: ...
    @property
    @abstractmethod
    def leaves(self) -> Sequence[DAGNode]: ...
    def set_downstream(
        self,
        task_or_task_list: DependencyMixin | Sequence[DependencyMixin],
        edge_modifier: EdgeModifier | None = ...,
    ) -> None:
        """Set a node (or nodes) to be directly downstream from the current node."""
        ...

    def set_upstream(
        self,
        task_or_task_list: DependencyMixin | Sequence[DependencyMixin],
        edge_modifier: EdgeModifier | None = ...,
    ) -> None:
        """Set a node (or nodes) to be directly upstream from the current node."""
        ...

    @property
    def downstream_list(self) -> Iterable[Operator]:
        """List of nodes directly downstream."""
        ...

    @property
    def upstream_list(self) -> Iterable[Operator]:
        """List of nodes directly upstream."""
        ...

    def get_direct_relative_ids(self, upstream: bool = ...) -> set[str]:
        """Get set of the direct relative ids to the current task, upstream or downstream."""
        ...

    def get_direct_relatives(self, upstream: bool = ...) -> Iterable[DAGNode]:
        """Get list of the direct relatives to the current task, upstream or downstream."""
        ...

    def serialize_for_task_group(self) -> tuple[DagAttributeTypes, Any]:
        """Serialize a task group's content; used by TaskGroupSerialization."""
        ...
