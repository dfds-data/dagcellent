"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable, Mapping, Sequence
from typing import (
    TYPE_CHECKING,
    Any,
    NamedTuple,
    Union,
)

import attr
from airflow.models.operator import Operator
from airflow.models.xcom_arg import XComArg
from airflow.serialization.serialized_objects import _ExpandInputRef
from airflow.typing_compat import TypeGuard
from airflow.utils.context import Context
from airflow.utils.mixins import ResolveMixin
from airflow.utils.session import provide_session
from sqlalchemy.orm import Session

if TYPE_CHECKING: ...
ExpandInput = Union["DictOfListsExpandInput", "ListOfDictsExpandInput"]
OperatorExpandArgument = Union["MappedArgument", "XComArg", Sequence, dict[str, Any]]
OperatorExpandKwargsArgument = Union[
    "XComArg", Sequence[Union["XComArg", Mapping[str, Any]]]
]

@attr.define(kw_only=True)
class MappedArgument(ResolveMixin):
    """
    Stand-in stub for task-group-mapping arguments.

    This is very similar to an XComArg, but resolved differently. Declared here
    (instead of in the task group module) to avoid import cycles.
    """

    _input: ExpandInput
    _key: str
    def get_task_map_length(self, run_id: str, *, session: Session) -> int | None: ...
    def iter_references(self) -> Iterable[tuple[Operator, str]]: ...
    @provide_session
    def resolve(
        self, context: Context, *, include_xcom: bool = ..., session: Session = ...
    ) -> Any: ...

def is_mappable(v: Any) -> TypeGuard[OperatorExpandArgument]: ...

class NotFullyPopulated(RuntimeError):
    """
    Raise when ``get_map_lengths`` cannot populate all mapping metadata.

    This is generally due to not all upstream tasks have finished when the
    function is called.
    """

    def __init__(self, missing: set[str]) -> None: ...
    def __str__(self) -> str: ...

class DictOfListsExpandInput(NamedTuple):
    """
    Storage type of a mapped operator's mapped kwargs.

    This is created from ``expand(**kwargs)``.
    """

    value: dict[str, OperatorExpandArgument]
    def get_parse_time_mapped_ti_count(self) -> int: ...
    def get_total_map_length(self, run_id: str, *, session: Session) -> int: ...
    def iter_references(self) -> Iterable[tuple[Operator, str]]: ...
    def resolve(
        self, context: Context, session: Session, *, include_xcom: bool = ...
    ) -> tuple[Mapping[str, Any], set[int]]: ...

class ListOfDictsExpandInput(NamedTuple):
    """
    Storage type of a mapped operator's mapped kwargs.

    This is created from ``expand_kwargs(xcom_arg)``.
    """

    value: OperatorExpandKwargsArgument
    def get_parse_time_mapped_ti_count(self) -> int: ...
    def get_total_map_length(self, run_id: str, *, session: Session) -> int: ...
    def iter_references(self) -> Iterable[tuple[Operator, str]]: ...
    def resolve(
        self, context: Context, session: Session, *, include_xcom: bool = ...
    ) -> tuple[Mapping[str, Any], set[int]]: ...

EXPAND_INPUT_EMPTY = ...
_EXPAND_INPUT_TYPES = ...

def get_map_type_key(expand_input: ExpandInput | _ExpandInputRef) -> str: ...
def create_expand_input(kind: str, value: Any) -> ExpandInput: ...
