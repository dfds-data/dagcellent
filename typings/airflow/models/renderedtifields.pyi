"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING

from airflow.models import Operator
from airflow.models.base import TaskInstanceDependencies
from airflow.models.taskinstance import TaskInstance, TaskInstancePydantic
from airflow.utils.retries import retry_db_transaction
from airflow.utils.session import provide_session
from sqlalchemy.orm import Session

"""Save Rendered Template Fields."""
if TYPE_CHECKING: ...

def get_serialized_template_fields(
    task: Operator,
):  # -> dict[str, str | dict[Any, Any] | list[Any] | int | float]:
    """
    Get and serialize the template fields for a task.

    Used in preparing to store them in RTIF table.

    :param task: Operator instance with rendered template fields

    :meta private:
    """
    ...

class RenderedTaskInstanceFields(TaskInstanceDependencies):
    """Save Rendered Template Fields."""

    __tablename__ = ...
    dag_id = ...
    task_id = ...
    run_id = ...
    map_index = ...
    rendered_fields = ...
    k8s_pod_yaml = ...
    __table_args__ = ...
    task_instance = ...
    dag_run = ...
    execution_date = ...
    def __init__(
        self, ti: TaskInstance, render_templates=..., rendered_fields=...
    ) -> None: ...
    def __repr__(self):  # -> str:
        ...
    @classmethod
    @provide_session
    def get_templated_fields(
        cls, ti: TaskInstance | TaskInstancePydantic, session: Session = ...
    ) -> dict | None:
        """
        Get templated field for a TaskInstance from the RenderedTaskInstanceFields table.

        :param ti: Task Instance
        :param session: SqlAlchemy Session
        :return: Rendered Templated TI field
        """
        ...

    @classmethod
    @provide_session
    def get_k8s_pod_yaml(cls, ti: TaskInstance, session: Session = ...) -> dict | None:
        """
        Get rendered Kubernetes Pod Yaml for a TaskInstance from the RenderedTaskInstanceFields table.

        :param ti: Task Instance
        :param session: SqlAlchemy Session
        :return: Kubernetes Pod Yaml
        """
        ...

    @provide_session
    @retry_db_transaction
    def write(self, session: Session = ...):  # -> None:
        """
        Write instance to database.

        :param session: SqlAlchemy Session
        """
        ...

    @classmethod
    @provide_session
    def delete_old_records(
        cls, task_id: str, dag_id: str, num_to_keep: int = ..., session: Session = ...
    ) -> None:
        """
        Keep only Last X (num_to_keep) number of records for a task by deleting others.

        In the case of data for a mapped task either all of the rows or none of the rows will be deleted, so
        we don't end up with partial data for a set of mapped Task Instances left in the database.

        :param task_id: Task ID
        :param dag_id: Dag ID
        :param num_to_keep: Number of Records to keep
        :param session: SqlAlchemy Session
        """
        ...
