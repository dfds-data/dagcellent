"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable, MutableMapping
from typing import TYPE_CHECKING, Any, ClassVar

from airflow.models.dag import DAG
from airflow.models.dagrun import DagRun
from airflow.models.operator import Operator
from airflow.serialization.pydantic.dag_run import DagRunPydantic
from airflow.utils.context import Context
from airflow.utils.mixins import ResolveMixin

if TYPE_CHECKING: ...
logger = ...

class Param:
    """
    Class to hold the default value of a Param and rule set to do the validations.

    Without the rule set it always validates and returns the default value.

    :param default: The value this Param object holds
    :param description: Optional help text for the Param
    :param schema: The validation schema of the Param, if not given then all kwargs except
        default & description will form the schema
    """

    __version__: ClassVar[int] = ...
    CLASS_IDENTIFIER = ...
    def __init__(
        self, default: Any = ..., description: str | None = ..., **kwargs
    ) -> None: ...
    def __copy__(self) -> Param: ...
    def resolve(self, value: Any = ..., suppress_exception: bool = ...) -> Any:
        """
        Run the validations and returns the Param's final value.

        May raise ValueError on failed validations, or TypeError
        if no value is passed and no value already exists.
        We first check that value is json-serializable; if not, warn.
        In future release we will require the value to be json-serializable.

        :param value: The value to be updated for the Param
        :param suppress_exception: To raise an exception or not when the validations fails.
            If true and validations fails, the return value would be None.
        """
        ...

    def dump(self) -> dict:
        """Dump the Param as a dictionary."""
        ...

    @property
    def has_value(self) -> bool: ...
    def serialize(self) -> dict: ...
    @staticmethod
    def deserialize(data: dict[str, Any], version: int) -> Param: ...

class ParamsDict(MutableMapping[str, Any]):
    """
    Class to hold all params for dags or tasks.

    All the keys are strictly string and values are converted into Param's object
    if they are not already. This class is to replace param's dictionary implicitly
    and ideally not needed to be used directly.


    :param dict_obj: A dict or dict like object to init ParamsDict
    :param suppress_exception: Flag to suppress value exceptions while initializing the ParamsDict
    """

    __version__: ClassVar[int] = ...
    __slots__ = ...
    def __init__(
        self, dict_obj: MutableMapping | None = ..., suppress_exception: bool = ...
    ) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __copy__(self) -> ParamsDict: ...
    def __deepcopy__(self, memo: dict[int, Any] | None) -> ParamsDict: ...
    def __contains__(self, o: object) -> bool: ...
    def __len__(self) -> int: ...
    def __delitem__(self, v: str) -> None: ...
    def __iter__(self):  # -> Iterator[str]:
        ...
    def __repr__(self):  # -> str:
        ...
    def __setitem__(self, key: str, value: Any) -> None:
        """
        Override for dictionary's ``setitem`` method to ensure all values are of Param's type only.

        :param key: A key which needs to be inserted or updated in the dict
        :param value: A value which needs to be set against the key. It could be of any
            type but will be converted and stored as a Param object eventually.
        """
        ...

    def __getitem__(self, key: str) -> Any:
        """
        Override for dictionary's ``getitem`` method to call the resolve method after fetching the key.

        :param key: The key to fetch
        """
        ...

    def get_param(self, key: str) -> Param:
        """Get the internal :class:`.Param` object for this key."""
        ...

    def items(self):  # -> ItemsView[str, Param]:
        ...
    def values(self):  # -> ValuesView[Param]:
        ...
    def update(self, *args, **kwargs) -> None: ...
    def dump(self) -> dict[str, Any]:
        """Dump the ParamsDict object as a dictionary, while suppressing exceptions."""
        ...

    def validate(self) -> dict[str, Any]:
        """Validate & returns all the Params object stored in the dictionary."""
        ...

    def serialize(self) -> dict[str, Any]: ...
    @staticmethod
    def deserialize(data: dict, version: int) -> ParamsDict: ...

class DagParam(ResolveMixin):
    """
    DAG run parameter reference.

    This binds a simple Param object to a name within a DAG instance, so that it
    can be resolved during the runtime via the ``{{ context }}`` dictionary. The
    ideal use case of this class is to implicitly convert args passed to a
    method decorated by ``@dag``.

    It can be used to parameterize a DAG. You can overwrite its value by setting
    it on conf when you trigger your DagRun.

    This can also be used in templates by accessing ``{{ context.params }}``.

    **Example**:

        with DAG(...) as dag:
          EmailOperator(subject=dag.param('subject', 'Hi from Airflow!'))

    :param current_dag: Dag being used for parameter.
    :param name: key value which is used to set the parameter
    :param default: Default value used if no parameter was set.
    """

    def __init__(self, current_dag: DAG, name: str, default: Any = ...) -> None: ...
    def iter_references(self) -> Iterable[tuple[Operator, str]]: ...
    def resolve(self, context: Context, *, include_xcom: bool = ...) -> Any:
        """Pull DagParam value from DagRun context. This method is run during ``op.execute()``."""
        ...

def process_params(
    dag: DAG,
    task: Operator,
    dag_run: DagRun | DagRunPydantic | None,
    *,
    suppress_exception: bool,
) -> dict[str, Any]:
    """Merge, validate params, and convert them into a simple dict."""
    ...
