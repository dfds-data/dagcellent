"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING

from airflow.configuration import conf
from airflow.models.taskinstance import TaskInstance
from airflow.utils.session import provide_session
from sqlalchemy.orm import Session

"""Sentry Integration."""
if TYPE_CHECKING: ...
log = ...

class DummySentry:
    """Blank class for Sentry."""

    def add_tagging(self, task_instance):  # -> None:
        """Blank function for tagging."""
        ...

    def add_breadcrumbs(self, task_instance, session: Session | None = ...):  # -> None:
        """Blank function for breadcrumbs."""
        ...

    def enrich_errors(self, run):
        """Blank function for formatting a TaskInstance._run_raw_task."""
        ...

    def flush(self):  # -> None:
        """Blank function for flushing errors."""
        ...

Sentry: DummySentry = ...
if conf.getboolean("sentry", "sentry_on", fallback=False):
    class ConfiguredSentry(DummySentry):
        """Configure Sentry SDK."""

        SCOPE_DAG_RUN_TAGS = ...
        SCOPE_TASK_INSTANCE_TAGS = ...
        SCOPE_CRUMBS = ...
        UNSUPPORTED_SENTRY_OPTIONS = ...
        def __init__(self) -> None:
            """Initialize the Sentry SDK."""
            ...

        def add_tagging(self, task_instance):  # -> None:
            """Add tagging for a task_instance."""
            ...

        @provide_session
        def add_breadcrumbs(
            self, task_instance: TaskInstance, session: Session | None = ...
        ) -> None:
            """Add breadcrumbs inside of a task_instance."""
            ...

        def enrich_errors(
            self, func
        ):  # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
            """
            Decorate errors.

            Wrap TaskInstance._run_raw_task to support task specific tags and breadcrumbs.
            """
            ...

        def flush(self):  # -> None:
            ...

    Sentry = ...
