"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from typing import TYPE_CHECKING, TypeVar

from airflow.lineage.backend import LineageBackend

"""Provides lineage support functions."""
if TYPE_CHECKING: ...
PIPELINE_OUTLETS = ...
PIPELINE_INLETS = ...
AUTO = ...
log = ...

def get_backend() -> LineageBackend | None:
    """Get the lineage backend if defined in the configs."""
    ...

T = TypeVar("T", bound=Callable)

def apply_lineage(func: T) -> T:
    """
    Conditionally send lineage to the backend.

    Saves the lineage to XCom and if configured to do so sends it
    to the backend.
    """
    ...

def prepare_lineage(func: T) -> T:
    """
    Prepare the lineage inlets and outlets.

    Inlets can be:

    * "auto" -> picks up any outlets from direct upstream tasks that have outlets defined, as such that
      if A -> B -> C and B does not have outlets but A does, these are provided as inlets.
    * "list of task_ids" -> picks up outlets from the upstream task_ids
    * "list of datasets" -> manually defined list of data

    """
    ...
