"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from http import HTTPStatus
from typing import TypeVar

from airflow.exceptions import AirflowException
from airflow.typing_compat import ParamSpec

PS = ParamSpec("PS")
RT = TypeVar("RT")
logger = ...

class AirflowHttpException(AirflowException):
    """Raise when there is a problem during an http request on the internal API decorator."""

    def __init__(self, message: str, status_code: HTTPStatus) -> None: ...

class InternalApiConfig:
    """Stores and caches configuration for Internal API."""

    _use_internal_api = ...
    _internal_api_endpoint = ...
    @staticmethod
    def set_use_database_access(component: str):  # -> None:
        """
        Block current component from using Internal API.

        All methods decorated with internal_api_call will always be executed locally.`
        This mode is needed for "trusted" components like Scheduler, Webserver, Internal Api server
        """
        ...

    @staticmethod
    def set_use_internal_api(
        component: str, allow_tests_to_use_db: bool = ...
    ):  # -> None:
        ...
    @staticmethod
    def get_use_internal_api():  # -> bool:
        ...
    @staticmethod
    def get_internal_api_endpoint():  # -> str:
        ...

def internal_api_call(func: Callable[PS, RT]) -> Callable[PS, RT]:
    """
    Allow methods to be executed in database isolation mode.

    If [core]database_access_isolation is true then such method are not executed locally,
    but instead RPC call is made to Database API (aka Internal API). This makes some components
    decouple from direct Airflow database access.
    Each decorated method must be present in METHODS list in airflow.api_internal.endpoints.rpc_api_endpoint.
    Only static methods can be decorated. This decorator must be before "provide_session".

    See [AIP-44](https://cwiki.apache.org/confluence/display/AIRFLOW/AIP-44+Airflow+Internal+API)
    for more information .
    """
    ...
