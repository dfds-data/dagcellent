"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable, Generator, Iterable, Mapping, Sequence
from functools import cached_property as cached_property
from typing import (
    Any,
    Protocol,
    TypeVar,
    overload,
)

from _typeshed import Incomplete as Incomplete
from airflow.hooks.base import BaseHook as BaseHook
from airflow.models import Connection as Connection
from airflow.providers.openlineage.extractors import OperatorLineage as OperatorLineage
from airflow.providers.openlineage.sqlparser import DatabaseInfo as DatabaseInfo
from pandas import DataFrame as DataFrame
from sqlalchemy.engine import URL as URL, Inspector as Inspector

"""
Definition of the public interface for airflow.providers.common.sql.hooks.sql
isort:skip_file
"""
T = TypeVar("T")
SQL_PLACEHOLDERS: Incomplete

def return_single_query_results(
    sql: str | Iterable[str], return_last: bool, split_statements: bool
): ...
def fetch_all_handler(cursor) -> list[tuple] | None: ...
def fetch_one_handler(cursor) -> list[tuple] | None: ...

class ConnectorProtocol(Protocol):
    def connect(self, host: str, port: int, username: str, schema: str) -> Any: ...

class DbApiHook(BaseHook):
    conn_name_attr: str
    default_conn_name: str
    strip_semicolon: bool
    supports_autocommit: bool
    supports_executemany: bool
    connector: ConnectorProtocol | None
    log_sql: Incomplete
    descriptions: Incomplete
    def __init__(
        self, *args, schema: str | None = ..., log_sql: bool = ..., **kwargs
    ) -> None: ...
    def get_conn_id(self) -> str: ...
    @cached_property
    def placeholder(self) -> str: ...
    @property
    def connection(self) -> Connection: ...
    @connection.setter
    def connection(self, value: Any) -> None: ...
    @property
    def connection_extra(self) -> dict: ...
    @cached_property
    def connection_extra_lower(self) -> dict: ...
    def get_conn(self) -> Any: ...
    def get_uri(self) -> str: ...
    @property
    def sqlalchemy_url(self) -> URL: ...
    def get_sqlalchemy_engine(self, engine_kwargs: Incomplete | None = ...): ...
    @property
    def inspector(self) -> Inspector: ...
    def get_pandas_df(
        self, sql, parameters: list | tuple | Mapping[str, Any] | None = ..., **kwargs
    ) -> DataFrame: ...
    def get_pandas_df_by_chunks(
        self,
        sql,
        parameters: list | tuple | Mapping[str, Any] | None = ...,
        *,
        chunksize: int,
        **kwargs,
    ) -> Generator[DataFrame, None, None]: ...
    def get_records(
        self,
        sql: str | list[str],
        parameters: Iterable | Mapping[str, Any] | None = ...,
    ) -> Any: ...
    def get_first(
        self,
        sql: str | list[str],
        parameters: Iterable | Mapping[str, Any] | None = ...,
    ) -> Any: ...
    @staticmethod
    def strip_sql_string(sql: str) -> str: ...
    @staticmethod
    def split_sql_string(sql: str, strip_semicolon: bool = ...) -> list[str]: ...
    @property
    def last_description(self) -> Sequence[Sequence] | None: ...
    @overload
    def run(
        self,
        sql: str | Iterable[str],
        autocommit: bool = ...,
        parameters: Iterable | Mapping[str, Any] | None = ...,
        handler: None = ...,
        split_statements: bool = ...,
        return_last: bool = ...,
    ) -> None: ...
    @overload
    def run(
        self,
        sql: str | Iterable[str],
        autocommit: bool = ...,
        parameters: Iterable | Mapping[str, Any] | None = ...,
        handler: Callable[[Any], T] = ...,
        split_statements: bool = ...,
        return_last: bool = ...,
    ) -> tuple | list[tuple] | list[list[tuple] | tuple] | None: ...
    def set_autocommit(self, conn, autocommit) -> None: ...
    def get_autocommit(self, conn) -> bool: ...
    def get_cursor(self) -> Any: ...
    def insert_rows(
        self,
        table,
        rows,
        target_fields: Incomplete | None = ...,
        commit_every: int = ...,
        replace: bool = ...,
        *,
        executemany: bool = ...,
        autocommit: bool = ...,
        **kwargs,
    ): ...
    def bulk_dump(self, table, tmp_file) -> None: ...
    def bulk_load(self, table, tmp_file) -> None: ...
    def test_connection(self) -> None: ...
    def get_openlineage_database_info(self, connection) -> DatabaseInfo | None: ...
    def get_openlineage_database_dialect(self, connection) -> str: ...
    def get_openlineage_default_schema(self) -> str | None: ...
    def get_openlineage_database_specific_lineage(
        self, task_instance
    ) -> OperatorLineage | None: ...
    @staticmethod
    def get_openlineage_authority_part(
        connection, default_port: int | None = ...
    ) -> str: ...
    def get_db_log_messages(self, conn) -> None: ...
