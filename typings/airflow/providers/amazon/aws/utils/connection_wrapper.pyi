"""
This type stub file was generated by pyright.
"""

from dataclasses import InitVar, dataclass
from functools import cached_property
from typing import TYPE_CHECKING, Any

from airflow.models.connection import Connection
from airflow.utils.log.logging_mixin import LoggingMixin
from airflow.utils.types import ArgNotSet
from botocore.config import Config

if TYPE_CHECKING: ...

@dataclass
class _ConnectionMetadata:
    """
    Connection metadata data-class.

    This class implements main :ref:`~airflow.models.connection.Connection` attributes
    and use in AwsConnectionWrapper for avoid circular imports.

    Only for internal usage, this class might change or removed in the future.
    """

    conn_id: str | None = ...
    conn_type: str | None = ...
    description: str | None = ...
    host: str | None = ...
    login: str | None = ...
    password: str | None = ...
    schema: str | None = ...
    port: int | None = ...
    extra: str | dict | None = ...
    @property
    def extra_dejson(self):  # -> dict[Any, Any]:
        ...

@dataclass
class AwsConnectionWrapper(LoggingMixin):
    """
    AWS Connection Wrapper class helper.

    Use for validate and resolve AWS Connection parameters.

    ``conn`` references an Airflow Connection object or AwsConnectionWrapper
        if it set to ``None`` than default values would use.

    The precedence rules for ``region_name``
        1. Explicit set (in Hook) ``region_name``.
        2. Airflow Connection Extra 'region_name'.

    The precedence rules for ``botocore_config``
        1. Explicit set (in Hook) ``botocore_config``.
        2. Construct from Airflow Connection Extra 'botocore_kwargs'.
        3. The wrapper's default value
    """

    conn: InitVar[Connection | AwsConnectionWrapper | _ConnectionMetadata | None]
    region_name: str | None = ...
    botocore_config: Config | None = ...
    verify: bool | str | None = ...
    conn_id: str | ArgNotSet | None = ...
    conn_type: str | None = ...
    login: str | None = ...
    password: str | None = ...
    schema: str | None = ...
    extra_config: dict[str, Any] = ...
    aws_access_key_id: str | None = ...
    aws_secret_access_key: str | None = ...
    aws_session_token: str | None = ...
    profile_name: str | None = ...
    endpoint_url: str | None = ...
    role_arn: str | None = ...
    assume_role_method: str | None = ...
    assume_role_kwargs: dict[str, Any] = ...
    service_config: dict[str, dict[str, Any]] = ...
    @cached_property
    def conn_repr(self):  # -> str:
        ...
    def get_service_config(self, service_name: str) -> dict[str, Any]:
        """
        Get AWS Service related config dictionary.

        :param service_name: Name of botocore/boto3 service.
        """
        ...

    def get_service_endpoint_url(
        self,
        service_name: str,
        *,
        sts_connection_assume: bool = ...,
        sts_test_connection: bool = ...,
    ) -> str | None: ...
    def __post_init__(
        self, conn: Connection | AwsConnectionWrapper | _ConnectionMetadata | None
    ) -> None:
        """Initialize the AwsConnectionWrapper object after instantiation."""
        ...

    @classmethod
    def from_connection_metadata(
        cls,
        conn_id: str | None = ...,
        login: str | None = ...,
        password: str | None = ...,
        extra: dict[str, Any] | None = ...,
    ):  # -> Self:
        """
        Create config from connection metadata.

        :param conn_id: Custom connection ID.
        :param login: AWS Access Key ID.
        :param password: AWS Secret Access Key.
        :param extra: Connection Extra metadata.
        """
        ...

    @property
    def extra_dejson(self):  # -> dict[str, Any]:
        """Compatibility with `airflow.models.Connection.extra_dejson` property."""
        ...

    @property
    def session_kwargs(self) -> dict[str, Any]:
        """Additional kwargs passed to boto3.session.Session."""
        ...

    def __bool__(self):  # -> bool:
        """Return the truth value of the AwsConnectionWrapper instance."""
        ...
