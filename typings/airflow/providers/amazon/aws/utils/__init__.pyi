"""
This type stub file was generated by pyright.
"""

from datetime import datetime
from enum import Enum
from typing import Any

log = ...

def trim_none_values(obj: dict):  # -> dict[Any, Any] | list[Any] | Any:
    ...
def datetime_to_epoch(date_time: datetime) -> int:
    """Convert a datetime object to an epoch integer (seconds)."""
    ...

def datetime_to_epoch_ms(date_time: datetime) -> int:
    """Convert a datetime object to an epoch integer (milliseconds)."""
    ...

def datetime_to_epoch_utc_ms(date_time: datetime) -> int:
    """Convert a datetime object to an epoch integer (milliseconds) in UTC timezone."""
    ...

def datetime_to_epoch_us(date_time: datetime) -> int:
    """Convert a datetime object to an epoch integer (microseconds)."""
    ...

def get_airflow_version() -> tuple[int, ...]: ...
def get_botocore_version() -> tuple[int, ...]:
    """Return the version number of the installed botocore package in the form of a tuple[int,...]."""
    ...

def validate_execute_complete_event(
    event: dict[str, Any] | None = ...,
) -> dict[str, Any]: ...

class _StringCompareEnum(Enum):
    """
    An Enum class which can be compared with regular `str` and subclasses.

    This class avoids multiple inheritance such as AwesomeEnum(str, Enum)
    which does not work well with templated_fields and Jinja templates.
    """

    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
