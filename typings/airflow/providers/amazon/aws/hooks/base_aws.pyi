"""
This type stub file was generated by pyright.
"""

import os
from collections.abc import Callable
from functools import cached_property
from typing import TYPE_CHECKING, Any, Generic, TypeVar, Union

import boto3
from aiobotocore.session import AioSession
from airflow.hooks.base import BaseHook
from airflow.models.connection import Connection
from airflow.providers.amazon.aws.utils.connection_wrapper import AwsConnectionWrapper
from airflow.utils.log.logging_mixin import LoggingMixin
from botocore.client import ClientMeta
from botocore.config import Config
from botocore.credentials import ReadOnlyCredentials
from botocore.waiter import Waiter

"""
This module contains Base AWS Hook.

.. seealso::
    For more information on how to use this hook, take a look at the guide:
    :ref:`howto/connection:aws`
"""
BaseAwsConnection = TypeVar("BaseAwsConnection", bound=boto3.client | boto3.resource)
if TYPE_CHECKING: ...
_loader = ...

class BaseSessionFactory(LoggingMixin):
    """
    Base AWS Session Factory class.

    This handles synchronous and async boto session creation. It can handle most
    of the AWS supported authentication methods.

    User can also derive from this class to have full control of boto3 session
    creation or to support custom federation.

    .. note::
        Not all features implemented for synchronous sessions are available
        for async sessions.

    .. seealso::
        - :ref:`howto/connection:aws:session-factory`
    """

    def __init__(
        self,
        conn: Connection | AwsConnectionWrapper | None,
        region_name: str | None = ...,
        config: Config | None = ...,
    ) -> None: ...
    @cached_property
    def conn(self) -> AwsConnectionWrapper:
        """Cached AWS Connection Wrapper."""
        ...

    @cached_property
    def basic_session(self) -> boto3.session.Session:
        """Cached property with basic boto3.session.Session."""
        ...

    @property
    def extra_config(self) -> dict[str, Any]:
        """AWS Connection extra_config."""
        ...

    @property
    def region_name(self) -> str | None:
        """AWS Region Name read-only property."""
        ...

    @property
    def config(self) -> Config | None:
        """Configuration for botocore client read-only property."""
        ...

    @property
    def role_arn(self) -> str | None:
        """Assume Role ARN from AWS Connection."""
        ...

    def get_async_session(self): ...
    def create_session(
        self, deferrable: bool = ...
    ) -> boto3.session.Session | AioSession:
        """Create boto3 or aiobotocore Session from connection config."""
        ...

class AwsGenericHook(BaseHook, Generic[BaseAwsConnection]):
    """
    Generic class for interact with AWS.

    This class provide a thin wrapper around the boto3 Python library.

    :param aws_conn_id: The Airflow connection used for AWS credentials.
        If this is None or empty then the default boto3 behaviour is used. If
        running Airflow in a distributed manner and aws_conn_id is None or
        empty, then default boto3 configuration would be used (and must be
        maintained on each worker node).
    :param verify: Whether or not to verify SSL certificates. See:
        https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
    :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
    :param client_type: Reference to :external:py:meth:`boto3.client service_name \
        <boto3.session.Session.client>`, e.g. 'emr', 'batch', 's3', etc.
        Mutually exclusive with ``resource_type``.
    :param resource_type: Reference to :external:py:meth:`boto3.resource service_name \
        <boto3.session.Session.resource>`, e.g. 's3', 'ec2', 'dynamodb', etc.
        Mutually exclusive with ``client_type``.
    :param config: Configuration for botocore client. See:
        https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html
    """

    conn_name_attr = ...
    default_conn_name = ...
    conn_type = ...
    hook_name = ...
    def __init__(
        self,
        aws_conn_id: str | None = ...,
        verify: bool | str | None = ...,
        region_name: str | None = ...,
        client_type: str | None = ...,
        resource_type: str | None = ...,
        config: Config | dict[str, Any] | None = ...,
    ) -> None: ...
    @cached_property
    def conn_config(self) -> AwsConnectionWrapper:
        """Get the Airflow Connection object and wrap it in helper (cached)."""
        ...

    @property
    def service_name(self) -> str:
        """Extracted botocore/boto3 service name from hook parameters."""
        ...

    @property
    def service_config(self) -> dict:
        """Config for hook-specific service from AWS Connection."""
        ...

    @property
    def region_name(self) -> str | None:
        """AWS Region Name read-only property."""
        ...

    @property
    def config(self) -> Config:
        """Configuration for botocore client read-only property."""
        ...

    @property
    def verify(self) -> bool | str | None:
        """Verify or not SSL certificates boto3 client/resource read-only property."""
        ...

    @cached_property
    def account_id(self) -> str:
        """Return associated AWS Account ID."""
        ...

    def get_session(
        self, region_name: str | None = ..., deferrable: bool = ...
    ) -> boto3.session.Session:
        """Get the underlying boto3.session.Session(region_name=region_name)."""
        ...

    def get_client_type(
        self,
        region_name: str | None = ...,
        config: Config | None = ...,
        deferrable: bool = ...,
    ) -> boto3.client:
        """Get the underlying boto3 client using boto3 session."""
        ...

    def get_resource_type(
        self, region_name: str | None = ..., config: Config | None = ...
    ) -> boto3.resource:
        """Get the underlying boto3 resource using boto3 session."""
        ...

    @cached_property
    def conn(self) -> BaseAwsConnection:
        """
        Get the underlying boto3 client/resource (cached).

        :return: boto3.client or boto3.resource
        """
        ...

    @property
    def async_conn(self):
        """Get an aiobotocore client to use for async operations."""
        ...

    @property
    def conn_client_meta(self) -> ClientMeta:
        """Get botocore client metadata from Hook connection (cached)."""
        ...

    @property
    def conn_region_name(self) -> str:
        """Get actual AWS Region Name from Hook connection (cached)."""
        ...

    @property
    def conn_partition(self) -> str:
        """Get associated AWS Region Partition from Hook connection (cached)."""
        ...

    def get_conn(self) -> BaseAwsConnection:
        """
        Get the underlying boto3 client/resource (cached).

        Implemented so that caching works as intended. It exists for compatibility
        with subclasses that rely on a super().get_conn() method.

        :return: boto3.client or boto3.resource
        """
        ...

    def get_credentials(self, region_name: str | None = ...) -> ReadOnlyCredentials:
        """
        Get the underlying `botocore.Credentials` object.

        This contains the following authentication attributes: access_key, secret_key and token.
        By use this method also secret_key and token will mask in tasks logs.
        """
        ...

    def expand_role(self, role: str, region_name: str | None = ...) -> str:
        """
        Get the Amazon Resource Name (ARN) for the role.

        If IAM role is already an IAM role ARN, the value is returned unchanged.

        :param role: IAM role name or ARN
        :param region_name: Optional region name to get credentials for
        :return: IAM role ARN
        """
        ...

    @staticmethod
    def retry(
        should_retry: Callable[[Exception], bool],
    ):  # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]]:
        """Repeat requests in response to exceeding a temporary quote limit."""
        ...

    @classmethod
    def get_ui_field_behaviour(cls) -> dict[str, Any]:
        """Return custom UI field behaviour for AWS Connection."""
        ...

    def test_connection(
        self,
    ):  # -> tuple[Literal[False], str] | tuple[Literal[True], str]:
        """
        Test the AWS connection by call AWS STS (Security Token Service) GetCallerIdentity API.

        .. seealso::
            https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html
        """
        ...

    @cached_property
    def waiter_path(self) -> os.PathLike[str] | None: ...
    def get_waiter(
        self,
        waiter_name: str,
        parameters: dict[str, str] | None = ...,
        deferrable: bool = ...,
        client=...,
    ) -> Waiter:
        """
        Get a waiter by name.

        First checks if there is a custom waiter with the provided waiter_name and
        uses that if it exists, otherwise it will check the service client for a
        waiter that matches the name and pass that through.

        If `deferrable` is True, the waiter will be an AIOWaiter, generated from the
        client that is passed as a parameter. If `deferrable` is True, `client` must be
        provided.

        :param waiter_name: The name of the waiter.  The name should exactly match the
            name of the key in the waiter model file (typically this is CamelCase).
        :param parameters: will scan the waiter config for the keys of that dict,
            and replace them with the corresponding value. If a custom waiter has
            such keys to be expanded, they need to be provided here.
        :param deferrable: If True, the waiter is going to be an async custom waiter.
            An async client must be provided in that case.
        :param client: The client to use for the waiter's operations
        """
        ...

    def list_waiters(self) -> list[str]:
        """Return a list containing the names of all waiters for the service, official and custom."""
        ...

class AwsBaseHook(AwsGenericHook[Union[boto3.client, boto3.resource]]):
    """
    Base class for interact with AWS.

    This class provide a thin wrapper around the boto3 Python library.

    :param aws_conn_id: The Airflow connection used for AWS credentials.
        If this is None or empty then the default boto3 behaviour is used. If
        running Airflow in a distributed manner and aws_conn_id is None or
        empty, then default boto3 configuration would be used (and must be
        maintained on each worker node).
    :param verify: Whether or not to verify SSL certificates. See:
        https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
    :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
    :param client_type: Reference to :external:py:meth:`boto3.client service_name \
        <boto3.session.Session.client>`, e.g. 'emr', 'batch', 's3', etc.
        Mutually exclusive with ``resource_type``.
    :param resource_type: Reference to :external:py:meth:`boto3.resource service_name \
        <boto3.session.Session.resource>`, e.g. 's3', 'ec2', 'dynamodb', etc.
        Mutually exclusive with ``client_type``.
    :param config: Configuration for botocore client. See:
        https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html
    """

    ...

def resolve_session_factory() -> type[BaseSessionFactory]:
    """Resolve custom SessionFactory class."""
    ...

SessionFactory = ...
