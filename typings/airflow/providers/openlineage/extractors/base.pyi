"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import Generic, TypeVar

from airflow.utils.log.logging_mixin import LoggingMixin
from attrs import define
from openlineage.client.event_v2 import Dataset as OLDataset
from openlineage.client.facet_v2 import JobFacet, RunFacet

DatasetSubclass = TypeVar("DatasetSubclass", bound=OLDataset)
BaseFacetSubclass = TypeVar(
    "BaseFacetSubclass", bound=BaseFacet_V1 | RunFacet | JobFacet
)

@define
class OperatorLineage(Generic[DatasetSubclass, BaseFacetSubclass]):
    """Structure returned from lineage extraction."""

    inputs: list[DatasetSubclass] = ...
    outputs: list[DatasetSubclass] = ...
    run_facets: dict[str, BaseFacetSubclass] = ...
    job_facets: dict[str, BaseFacetSubclass] = ...

class BaseExtractor(ABC, LoggingMixin):
    """
    Abstract base extractor class.

    This is used mostly to maintain support for custom extractors.
    """

    _allowed_query_params: list[str] = ...
    def __init__(self, operator) -> None: ...
    @classmethod
    @abstractmethod
    def get_operator_classnames(cls) -> list[str]:
        """
        Get a list of operators that extractor works for.

        This is an abstract method that subclasses should implement. There are
        operators that work very similarly and one extractor can cover.
        """
        ...

    def extract(self) -> OperatorLineage | None: ...
    def extract_on_complete(self, task_instance) -> OperatorLineage | None: ...

class DefaultExtractor(BaseExtractor):
    """Extractor that uses `get_openlineage_facets_on_start/complete/failure` methods."""

    @classmethod
    def get_operator_classnames(cls) -> list[str]:
        """
        Assign this extractor to *no* operators.

        Default extractor is chosen not on the classname basis, but
        by existence of get_openlineage_facets method on operator.
        """
        ...

    def extract_on_complete(self, task_instance) -> OperatorLineage | None: ...
