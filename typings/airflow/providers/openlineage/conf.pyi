"""
This type stub file was generated by pyright.
"""

import os
from functools import cache
from typing import Any

"""
This module provides functions for safely retrieving and handling OpenLineage configurations.

For the legacy boolean env variables `OPENLINEAGE_AIRFLOW_DISABLE_SOURCE_CODE` and `OPENLINEAGE_DISABLED`,
any string not equal to "true", "1", or "t" should be treated as False, to maintain backward compatibility.
Support for legacy variables will be removed in Airflow 3.
"""
if os.getenv("PYTEST_VERSION"):
    def decorator(func): ...

    cache = ...
else: ...
_CONFIG_SECTION = ...

@cache
def config_path(check_legacy_env_var: bool = ...) -> str:
    """[openlineage] config_path."""
    ...

@cache
def is_source_enabled() -> bool:
    """[openlineage] disable_source_code."""
    ...

@cache
def disabled_operators() -> set[str]:
    """[openlineage] disabled_for_operators."""
    ...

@cache
def selective_enable() -> bool:
    """[openlineage] selective_enable."""
    ...

@cache
def spark_inject_parent_job_info() -> bool:
    """[openlineage] spark_inject_parent_job_info."""
    ...

@cache
def custom_extractors() -> set[str]:
    """[openlineage] extractors."""
    ...

@cache
def custom_run_facets() -> set[str]:
    """[openlineage] custom_run_facets."""
    ...

@cache
def namespace() -> str:
    """[openlineage] namespace."""
    ...

@cache
def transport() -> dict[str, Any]:
    """[openlineage] transport."""
    ...

@cache
def is_disabled() -> bool:
    """[openlineage] disabled + check if any configuration is present."""
    ...

@cache
def dag_state_change_process_pool_size() -> int:
    """[openlineage] dag_state_change_process_pool_size."""
    ...

@cache
def execution_timeout() -> int:
    """[openlineage] execution_timeout."""
    ...

@cache
def include_full_task_info() -> bool:
    """[openlineage] include_full_task_info."""
    ...

@cache
def debug_mode() -> bool:
    """[openlineage] debug_mode."""
    ...
