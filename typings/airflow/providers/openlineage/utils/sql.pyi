"""
This type stub file was generated by pyright.
"""

from enum import IntEnum
from typing import TYPE_CHECKING

from airflow.hooks.base import BaseHook
from attrs import define
from openlineage.client.event_v2 import Dataset
from openlineage.client.facet_v2 import schema_dataset
from sqlalchemy import Table
from sqlalchemy.engine import Engine
from sqlalchemy.sql import ClauseElement

if TYPE_CHECKING: ...
log = ...

class ColumnIndex(IntEnum):
    """Enumerates the indices of columns in information schema view."""

    SCHEMA = ...
    TABLE_NAME = ...
    COLUMN_NAME = ...
    ORDINAL_POSITION = ...
    UDT_NAME = ...
    DATABASE = ...

TablesHierarchy = dict[str | None, dict[str | None, list[str]]]

@define
class TableSchema:
    """Temporary object used to construct OpenLineage Dataset."""

    table: str
    schema: str | None
    database: str | None
    fields: list[schema_dataset.SchemaDatasetFacetFields]
    def to_dataset(
        self, namespace: str, database: str | None = ..., schema: str | None = ...
    ) -> Dataset: ...

def get_table_schemas(
    hook: BaseHook,
    namespace: str,
    schema: str | None,
    database: str | None,
    in_query: str | None,
    out_query: str | None,
) -> tuple[list[Dataset], list[Dataset]]:
    """
    Query database for table schemas.

    Uses provided hook. Responsibility to provide queries for this function is on particular extractors.
    If query for input or output table isn't provided, the query is skipped.
    """
    ...

def parse_query_result(cursor) -> list[TableSchema]:
    """
    Fetch results from DB-API 2.0 cursor and creates list of table schemas.

    For each row it creates :class:`TableSchema`.
    """
    ...

def create_information_schema_query(
    columns: list[str],
    information_schema_table_name: str,
    tables_hierarchy: TablesHierarchy,
    uppercase_names: bool = ...,
    use_flat_cross_db_query: bool = ...,
    sqlalchemy_engine: Engine | None = ...,
) -> str:
    """Create query for getting table schemas from information schema."""
    ...

def create_filter_clauses(
    mapping: dict, information_schema_table: Table, uppercase_names: bool = ...
) -> ClauseElement:
    """
    Create comprehensive filter clauses for all tables in one database.

    :param mapping: a nested dictionary of database, schema names and list of tables in each
    :param information_schema_table: `sqlalchemy.Table` instance used to construct clauses
        For most SQL dbs it contains `table_name` and `table_schema` columns,
        therefore it is expected the table has them defined.
    :param uppercase_names: if True use schema and table names uppercase
    """
    ...
