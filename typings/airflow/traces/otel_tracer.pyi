"""
This type stub file was generated by pyright.
"""

from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter
from opentelemetry.sdk.trace import Span, Tracer as OpenTelemetryTracer
from opentelemetry.sdk.trace.export import ConsoleSpanExporter
from opentelemetry.sdk.trace.id_generator import IdGenerator
from opentelemetry.trace import SpanContext, Tracer

log = ...
_NEXT_ID = ...

class OtelTrace:
    """
    Handle all tracing requirements such as getting the tracer, and starting a new span.

    When OTEL is enabled, the Trace class will be replaced by this class.
    """

    def __init__(
        self,
        span_exporter: ConsoleSpanExporter | OTLPSpanExporter,
        tag_string: str | None = ...,
    ) -> None: ...
    def get_tracer(
        self, component: str, trace_id: int | None = ..., span_id: int | None = ...
    ) -> OpenTelemetryTracer | Tracer:
        """Tracer that will use special AirflowOtelIdGenerator to control producing certain span and trace id."""
        ...

    def get_current_span(self):  # -> Span:
        ...
    def use_span(self, span: Span):  # -> _AgnosticContextManager[Span]:
        ...
    def start_span(
        self,
        span_name: str,
        component: str | None = ...,
        parent_sc: SpanContext | None = ...,
        span_id=...,
        links=...,
        start_time=...,
    ):  # -> _AgnosticContextManager[Span]:
        """Start a span; if service_name is not given, otel_service is used."""
        ...

    def start_span_from_dagrun(
        self, dagrun, span_name: str | None = ..., component: str = ..., links=...
    ):  # -> _AgnosticContextManager[Span]:
        """Produce a span from dag run."""
        ...

    def start_span_from_taskinstance(
        self,
        ti,
        span_name: str | None = ...,
        component: str = ...,
        child: bool = ...,
        links=...,
    ):  # -> _AgnosticContextManager[Span]:
        """
        Create and start span from given task instance.

        Essentially the span represents the ti itself if child == True, it will create a 'child' span under the given span.
        """
        ...

def gen_context(trace_id: int, span_id: int):  # -> SpanContext:
    """Generate a remote span context for given trace and span id."""
    ...

def gen_links_from_kv_list(kv_list):  # -> list[Any]:
    """Convert list of kv dic of trace_id and span_id and generate list of SpanContext."""
    ...

def gen_link_from_traceparent(traceparent: str):  # -> Link:
    """Generate Link object from provided traceparent string."""
    ...

def get_otel_tracer(cls) -> OtelTrace:
    """Get OTEL tracer from airflow configuration."""
    ...

class AirflowOtelIdGenerator(IdGenerator):
    """
    ID Generator for span id and trace id.

    The specific purpose of this ID generator is to generate a given span_id when the
    generate_span_id is called for the FIRST time. Any subsequent calls to the generate_span_id()
    will then fall back into producing random ones. As for the trace_id, the class is designed
    to produce the provided trace id (and not anything random)
    """

    def __init__(self, span_id=..., trace_id=...) -> None: ...
    def generate_span_id(self) -> int: ...
    def generate_trace_id(self) -> int: ...
