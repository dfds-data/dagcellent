"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from typing import TYPE_CHECKING, Any

from airflow.typing_compat import Protocol

log = ...

def gen_context(trace_id, span_id):  # -> SpanContext:
    """Generate span context from trace_id and span_id."""
    ...

def gen_links_from_kv_list(list):  # -> list[Any]:
    """Generate links from kv list of {trace_id:int, span_id:int}."""
    ...

def span(func):  # -> Callable[..., Any]:
    """Decorate a function with span."""
    ...

class EmptyContext:
    """If no Tracer is configured, EmptyContext is used as a fallback."""

    def __init__(self) -> None: ...

class EmptySpan:
    """If no Tracer is configured, EmptySpan is used as a fallback."""

    def __enter__(self):  # -> Self:
        """Enter."""
        ...

    def __exit__(self, *args, **kwargs):  # -> None:
        """Exit."""
        ...

    def __call__(self, obj):
        """Call."""
        ...

    def get_span_context(self):  # -> EmptyContext:
        """Get span context."""
        ...

    def set_attribute(self, key, value) -> None:
        """Set an attribute to the span."""
        ...

    def set_attributes(self, attributes) -> None:
        """Set multiple attributes at once."""
        ...

    def is_recording(self):  # -> Literal[False]:
        ...
    def add_event(
        self, name: str, attributes: Any | None = ..., timestamp: int | None = ...
    ) -> None:
        """Add event to span."""
        ...

    def add_link(self, context: Any, attributes: Any | None = ...) -> None:
        """Add link to the span."""
        ...

    def end(self, end_time=..., *args, **kwargs) -> None:
        """End."""
        ...

EMPTY_SPAN = ...
EMPTY_CTX = ...

class Tracer(Protocol):
    """This class is only used for TypeChecking (for IDEs, mypy, etc)."""

    instance: Tracer | EmptyTrace | None = ...
    @classmethod
    def get_tracer(cls, component):
        """Get a tracer."""
        ...

    @classmethod
    def start_span(
        cls,
        span_name: str,
        component: str | None = ...,
        parent_sc=...,
        span_id=...,
        links=...,
        start_time=...,
    ):
        """Start a span."""
        ...

    @classmethod
    def use_span(cls, span):
        """Use a span as current."""
        ...

    @classmethod
    def get_current_span(self): ...
    @classmethod
    def start_span_from_dagrun(
        cls, dagrun, span_name=..., service_name=..., component=..., links=...
    ):
        """Start a span from dagrun."""
        ...

    @classmethod
    def start_span_from_taskinstance(
        cls, ti, span_name=..., component=..., child=..., links=...
    ):
        """Start a span from taskinstance."""
        ...

class EmptyTrace:
    """If no Tracer is configured, EmptyTracer is used as a fallback."""

    @classmethod
    def get_tracer(
        cls, component: str, trace_id: int | None = ..., span_id: int | None = ...
    ):  # -> type[Self]:
        """Get a tracer using provided node id and trace id."""
        ...

    @classmethod
    def start_span(
        cls,
        span_name: str,
        component: str | None = ...,
        parent_sc=...,
        span_id=...,
        links=...,
        start_time=...,
    ) -> EmptySpan:
        """Start a span."""
        ...

    @classmethod
    def use_span(cls, span) -> EmptySpan:
        """Use a span as current."""
        ...

    @classmethod
    def get_current_span(self) -> EmptySpan:
        """Get the current span."""
        ...

    @classmethod
    def start_span_from_dagrun(
        cls, dagrun, span_name=..., service_name=..., component=..., links=...
    ) -> EmptySpan:
        """Start a span from dagrun."""
        ...

    @classmethod
    def start_span_from_taskinstance(
        cls, ti, span_name=..., component=..., child=..., links=...
    ) -> EmptySpan:
        """Start a span from taskinstance."""
        ...

class _Trace(type):
    factory: Callable
    instance: Tracer | EmptyTrace | None = ...
    def __getattr__(cls, name: str) -> str: ...
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def get_constant_tags(cls) -> str | None:
        """Get constant tags to add to all traces."""
        ...

if TYPE_CHECKING:
    Trace: EmptyTrace
    ...
else: ...
