"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable, Collection, Mapping, Sequence
from typing import Any

from airflow.decorators.base import DecoratedOperator, TaskDecorator
from airflow.operators.bash import BashOperator
from airflow.utils.context import Context

class _BashDecoratedOperator(DecoratedOperator, BashOperator):
    """
    Wraps a Python callable and uses the callable return value as the Bash command to be executed.

    :param python_callable: A reference to an object that is callable.
    :param op_kwargs: A dictionary of keyword arguments that will get unpacked
        in your function (templated).
    :param op_args: A list of positional arguments that will get unpacked when
        calling your callable (templated).
    """

    template_fields: Sequence[str] = ...
    template_fields_renderers: dict[str, str] = ...
    custom_operator_name: str = ...
    def __init__(
        self,
        *,
        python_callable: Callable,
        op_args: Collection[Any] | None = ...,
        op_kwargs: Mapping[str, Any] | None = ...,
        **kwargs,
    ) -> None: ...
    def execute(self, context: Context) -> Any: ...

def bash_task(python_callable: Callable | None = ..., **kwargs) -> TaskDecorator:
    """
    Wrap a function into a BashOperator.

    Accepts kwargs for operator kwargs. Can be reused in a single DAG. This function is only used only used
    during type checking or auto-completion.

    :param python_callable: Function to decorate.

    :meta private:
    """
    ...
