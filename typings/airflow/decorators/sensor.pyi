"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable, Sequence
from typing import TYPE_CHECKING

from airflow.decorators.base import TaskDecorator
from airflow.sensors.python import PythonSensor

if TYPE_CHECKING: ...

class DecoratedSensorOperator(PythonSensor):
    """
    Wraps a Python callable and captures args/kwargs when called for execution.

    :param python_callable: A reference to an object that is callable
    :param task_id: task Id
    :param op_args: a list of positional arguments that will get unpacked when
        calling your callable (templated)
    :param op_kwargs: a dictionary of keyword arguments that will get unpacked
        in your function (templated)
    :param kwargs_to_upstream: For certain operators, we might need to upstream certain arguments
        that would otherwise be absorbed by the DecoratedOperator (for example python_callable for the
        PythonOperator). This gives a user the option to upstream kwargs as needed.
    """

    template_fields: Sequence[str] = ...
    template_fields_renderers: dict[str, str] = ...
    custom_operator_name = ...
    shallow_copy_attrs: Sequence[str] = ...
    def __init__(self, *, task_id: str, **kwargs) -> None: ...

def sensor_task(python_callable: Callable | None = ..., **kwargs) -> TaskDecorator:
    """
    Wrap a function into an Airflow operator.

    Accepts kwargs for operator kwarg. Can be reused in a single DAG.
    :param python_callable: Function to decorate
    """
    ...
