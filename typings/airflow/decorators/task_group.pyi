"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from typing import TYPE_CHECKING, Any, ClassVar, Generic, TypeVar, overload

import attr
from airflow.decorators.base import ExpandableFactory
from airflow.models.dag import DAG
from airflow.models.expandinput import (
    OperatorExpandArgument,
    OperatorExpandKwargsArgument,
)
from airflow.models.taskmixin import DAGNode
from airflow.typing_compat import ParamSpec
from airflow.utils.task_group import TaskGroup

"""
Implements the ``@task_group`` function decorator.

When the decorated function is called, a task group will be created to represent
a collection of closely related tasks on the same DAG that should be grouped
together when the DAG is displayed graphically.
"""
if TYPE_CHECKING: ...
FParams = ParamSpec("FParams")
FReturn = TypeVar("FReturn", None, DAGNode)
task_group_sig = ...

@attr.define()
class _TaskGroupFactory(ExpandableFactory, Generic[FParams, FReturn]):
    function: Callable[FParams, FReturn] = ...
    tg_kwargs: dict[str, Any] = ...
    partial_kwargs: dict[str, Any] = ...
    _task_group_created: bool = ...
    tg_class: ClassVar[type[TaskGroup]] = ...
    def __attrs_post_init__(self):  # -> None:
        ...
    def __del__(self):  # -> None:
        ...
    def __call__(self, *args: FParams.args, **kwargs: FParams.kwargs) -> DAGNode:
        """
        Instantiate the task group.

        This uses the wrapped function to create a task group. Depending on the
        return type of the wrapped function, this either returns the last task
        in the group, or the group itself, to support task chaining.
        """
        ...

    def override(self, **kwargs: Any) -> _TaskGroupFactory[FParams, FReturn]: ...
    def partial(self, **kwargs: Any) -> _TaskGroupFactory[FParams, FReturn]: ...
    def expand(self, **kwargs: OperatorExpandArgument) -> DAGNode: ...
    def expand_kwargs(self, kwargs: OperatorExpandKwargsArgument) -> DAGNode: ...

@overload
def task_group(
    group_id: str | None = ...,
    prefix_group_id: bool = ...,
    parent_group: TaskGroup | None = ...,
    dag: DAG | None = ...,
    default_args: dict[str, Any] | None = ...,
    tooltip: str = ...,
    ui_color: str = ...,
    ui_fgcolor: str = ...,
    add_suffix_on_collision: bool = ...,
) -> Callable[[Callable[FParams, FReturn]], _TaskGroupFactory[FParams, FReturn]]: ...
@overload
def task_group(
    python_callable: Callable[FParams, FReturn],
) -> _TaskGroupFactory[FParams, FReturn]: ...
def task_group(
    python_callable=..., **tg_kwargs
):  # -> _TaskGroupFactory[Callable[..., Any], Any] | partial[_TaskGroupFactory[FParams, FReturn]]:
    """
    Python TaskGroup decorator.

    This wraps a function into an Airflow TaskGroup. When used as the
    ``@task_group()`` form, all arguments are forwarded to the underlying
    TaskGroup class. Can be used to parametrize TaskGroup.

    :param python_callable: Function to decorate.
    :param tg_kwargs: Keyword arguments for the TaskGroup object.
    """
    ...
