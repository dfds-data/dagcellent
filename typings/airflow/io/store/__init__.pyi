"""
This type stub file was generated by pyright.
"""

from functools import cached_property
from typing import TYPE_CHECKING, ClassVar

from airflow.io.typedef import Properties
from fsspec import AbstractFileSystem

if TYPE_CHECKING: ...

class ObjectStore:
    """Manages a filesystem or object storage."""

    __version__: ClassVar[int] = ...
    method: str
    conn_id: str | None
    protocol: str
    storage_options: Properties | None
    def __init__(
        self,
        protocol: str,
        conn_id: str | None,
        fs: AbstractFileSystem | None = ...,
        storage_options: Properties | None = ...,
    ) -> None: ...
    def __str__(self) -> str: ...
    @cached_property
    def fs(self) -> AbstractFileSystem: ...
    @property
    def fsid(self) -> str:
        """
        Get the filesystem id for this store in order to be able to compare across instances.

        The underlying `fsid` is returned from the filesystem if available, otherwise it is generated
        from the protocol and connection ID.

        :return: deterministic the filesystem ID
        """
        ...

    def serialize(self):  # -> dict[str, Any]:
        ...
    @classmethod
    def deserialize(cls, data: dict[str, str], version: int):  # -> ObjectStore:
        ...
    def __eq__(self, other) -> bool: ...

_STORE_CACHE: dict[str, ObjectStore] = ...

def attach(
    protocol: str | None = ...,
    conn_id: str | None = ...,
    alias: str | None = ...,
    encryption_type: str | None = ...,
    fs: AbstractFileSystem | None = ...,
    **kwargs,
) -> ObjectStore:
    """
    Attach a filesystem or object storage.

    :param alias: the alias to be used to refer to the store, autogenerated if omitted
    :param protocol: the scheme that is used without ://
    :param conn_id: the connection to use to connect to the filesystem
    :param encryption_type: the encryption type to use to connect to the filesystem
    :param fs: the filesystem type to use to connect to the filesystem
    """
    ...
