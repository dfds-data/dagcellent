"""
This type stub file was generated by pyright.
"""

import contextlib
from collections.abc import Iterator

from airflow.hooks.base import BaseHook

SubprocessResult = ...

@contextlib.contextmanager
def working_directory(cwd: str | None = ...) -> Iterator[str]:
    """
    Context manager for handling (temporary) working directory.

    Use the given cwd as working directory, if provided.
    Otherwise, create a temporary directory.
    """
    ...

class SubprocessHook(BaseHook):
    """Hook for running processes with the ``subprocess`` module."""

    def __init__(self, **kwargs) -> None: ...
    def run_command(
        self,
        command: list[str],
        env: dict[str, str] | None = ...,
        output_encoding: str = ...,
        cwd: str | None = ...,
    ) -> SubprocessResult:
        """
        Execute the command.

        If ``cwd`` is None, execute the command in a temporary directory which will be cleaned afterwards.
        If ``env`` is not supplied, ``os.environ`` is passed

        :param command: the command to run
        :param env: Optional dict containing environment variables to be made available to the shell
            environment in which ``command`` will be executed.  If omitted, ``os.environ`` will be used.
            Note, that in case you have Sentry configured, original variables from the environment
            will also be passed to the subprocess with ``SUBPROCESS_`` prefix. See
            :doc:`/administration-and-deployment/logging-monitoring/errors` for details.
        :param output_encoding: encoding to use for decoding stdout
        :param cwd: Working directory to run the command in.
            If None (default), the command is run in a temporary directory.
        :return: :class:`namedtuple` containing ``exit_code`` and ``output``, the last line from stderr
            or stdout
        """
        ...

    def send_sigterm(self):  # -> None:
        """Send SIGTERM signal to ``self.sub_process`` if one exists."""
        ...
