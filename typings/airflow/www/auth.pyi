"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable, Sequence
from typing import TYPE_CHECKING, TypeVar

from airflow.auth.managers.base_auth_manager import ResourceMethod
from airflow.auth.managers.models.resource_details import AccessView, DagAccessEntity

if TYPE_CHECKING: ...
T = TypeVar("T", bound=Callable)
log = ...

def get_access_denied_message():  # -> str:
    ...
def has_access(permissions: Sequence[tuple[str, str]] | None = ...) -> Callable[[T], T]:
    """
    Check current user's permissions against required permissions.

    Deprecated. Do not use this decorator, use one of the decorator `has_access_*` defined in
    airflow/www/auth.py instead.
    This decorator will only work with FAB authentication and not with other auth providers.

    This decorator is widely used in user plugins, do not remove it. See
    https://github.com/apache/airflow/pull/33213#discussion_r1346287224
    """
    ...

def has_access_with_pk(
    f,
):  # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any | Response]:
    """
    Check permissions on views.

    The implementation is very similar from
    https://github.com/dpgaspar/Flask-AppBuilder/blob/c6fecdc551629e15467fde5d06b4437379d90592/flask_appbuilder/security/decorators.py#L134

    The difference is that this decorator will pass the resource ID to check permissions. It allows
    fined-grained access control using resource IDs.
    """
    ...

def has_access_configuration(method: ResourceMethod) -> Callable[[T], T]: ...
def has_access_connection(method: ResourceMethod) -> Callable[[T], T]: ...
def has_access_dag(
    method: ResourceMethod, access_entity: DagAccessEntity | None = ...
) -> Callable[[T], T]: ...
def has_access_dag_entities(
    method: ResourceMethod, access_entity: DagAccessEntity
) -> Callable[[T], T]: ...
def has_access_dataset(method: ResourceMethod) -> Callable[[T], T]:
    """Check current user's permissions against required permissions for datasets."""
    ...

def has_access_pool(method: ResourceMethod) -> Callable[[T], T]: ...
def has_access_variable(method: ResourceMethod) -> Callable[[T], T]: ...
def has_access_view(access_view: AccessView = ...) -> Callable[[T], T]:
    """Check current user's permissions to access the website."""
    ...
