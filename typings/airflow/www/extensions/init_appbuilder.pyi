"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING

from flask import Flask
from flask_appbuilder import BaseView
from flask_appbuilder.security.manager import BaseSecurityManager
from sqlalchemy.orm import Session

if TYPE_CHECKING: ...
log = ...

def dynamic_class_import(class_path):  # -> Any | None:
    """
    Will dynamically import a class from a string path.

    :param class_path: string with class path
    :return: class
    """
    ...

class AirflowAppBuilder:
    """
    This is the base class for all the framework.

    This is where you will register all your views
    and create the menu structure.
    Will hold your flask app object, all your views, and security classes.
    Initialize your application like this for SQLAlchemy::
        from flask import Flask
        from flask_appbuilder import SQLA, AppBuilder
        app = Flask(__name__)
        app.config.from_object('config')
        db = SQLA(app)
        appbuilder = AppBuilder(app, db.session)
    When using MongoEngine::
        from flask import Flask
        from flask_appbuilder import AppBuilder
        from flask_appbuilder.security.mongoengine.manager import SecurityManager
        from flask_mongoengine import MongoEngine
        app = Flask(__name__)
        app.config.from_object('config')
        dbmongo = MongoEngine(app)
        appbuilder = AppBuilder(app)
    You can also create everything as an application factory.
    """

    baseviews: list[BaseView | Session] = ...
    app = ...
    session = ...
    sm: BaseSecurityManager
    bm = ...
    addon_managers: dict
    _addon_managers: list
    menu = ...
    indexview = ...
    static_folder = ...
    static_url_path = ...
    template_filters = ...
    def __init__(
        self,
        app=...,
        session: Session | None = ...,
        menu=...,
        indexview=...,
        base_template=...,
        static_folder=...,
        static_url_path=...,
    ) -> None:
        """
        App-builder constructor.

        :param app:
            The flask app object
        :param session:
            The SQLAlchemy session object
        :param menu:
            optional, a previous constructed menu
        :param indexview:
            optional, your customized indexview
        :param static_folder:
            optional, your override for the global static folder
        :param static_url_path:
            optional, your override for the global static url path
        """
        ...

    def init_app(self, app, session):  # -> None:
        """
        Will initialize the Flask app, supporting the app factory pattern.

        :param app:
        :param session: The SQLAlchemy session
        """
        ...

    def post_init(self):  # -> None:
        ...
    @property
    def get_app(self):  # -> Flask:
        """
        Get current or configured flask app.

        :return: Flask App
        """
        ...

    @property
    def get_session(self):  # -> None:
        """
        Get the current sqlalchemy session.

        :return: SQLAlchemy Session
        """
        ...

    @property
    def app_name(self):
        """
        Get the App name.

        :return: String with app name
        """
        ...

    @property
    def require_confirmation_dag_change(self):
        """
        Get the value of the require_confirmation_dag_change configuration.

        The logic is:
         - return True, in page dag.html, when user trigger/pause the dag from UI.
           Once confirmation box will be shown before triggering the dag.
         - Default value is False.

        :return: Boolean
        """
        ...

    @property
    def app_theme(self):
        """
        Get the App theme name.

        :return: String app theme name
        """
        ...

    @property
    def app_icon(self):
        """
        Get the App icon location.

        :return: String with relative app icon location
        """
        ...

    @property
    def languages(self): ...
    @property
    def version(self):  # -> Literal['4.5.2']:
        """
        Get the current F.A.B. version.

        :return: String with the current F.A.B. version
        """
        ...

    def add_view(
        self,
        baseview,
        name,
        href=...,
        icon=...,
        label=...,
        category=...,
        category_icon=...,
        category_label=...,
        menu_cond=...,
    ):  # -> object:
        """
        Add your views associated with menus using this method.

        :param baseview:
            A BaseView type class instantiated or not.
            This method will instantiate the class for you if needed.
        :param name:
            The string name that identifies the menu.
        :param href:
            Override the generated href for the menu.
            You can use an url string or an endpoint name
            if non provided default_view from view will be set as href.
        :param icon:
            Font-Awesome icon name, optional.
        :param label:
            The label that will be displayed on the menu,
            if absent param name will be used
        :param category:
            The menu category where the menu will be included,
            if non provided the view will be accessible as a top menu.
        :param category_icon:
            Font-Awesome icon name for the category, optional.
        :param category_label:
            The label that will be displayed on the menu,
            if absent param name will be used
        :param menu_cond:
            If a callable, :code:`menu_cond` will be invoked when
            constructing the menu items. If it returns :code:`True`,
            then this link will be a part of the menu. Otherwise, it
            will not be included in the menu items. Defaults to
            :code:`None`, meaning the item will always be present.

        Examples::

            appbuilder = AppBuilder(app, db)
            # Register a view, rendering a top menu without icon.
            appbuilder.add_view(MyModelView(), "My View")
            # or not instantiated
            appbuilder.add_view(MyModelView, "My View")
            # Register a view, a submenu "Other View" from "Other" with a phone icon.
            appbuilder.add_view(
                MyOtherModelView, "Other View", icon="fa-phone", category="Others"
            )
            # Register a view, with category icon and translation.
            appbuilder.add_view(
                YetOtherModelView,
                "Other View",
                icon="fa-phone",
                label=_("Other View"),
                category="Others",
                category_icon="fa-envelop",
                category_label=_("Other View"),
            )
            # Register a view whose menu item will be conditionally displayed
            appbuilder.add_view(
                YourFeatureView,
                "Your Feature",
                icon="fa-feature",
                label=_("Your Feature"),
                menu_cond=lambda: is_feature_enabled("your-feature"),
            )
            # Add a link
            appbuilder.add_link("google", href="www.google.com", icon="fa-google-plus")
        """
        ...

    def add_link(
        self,
        name,
        href,
        icon=...,
        label=...,
        category=...,
        category_icon=...,
        category_label=...,
        baseview=...,
        cond=...,
    ):  # -> None:
        """
        Add your own links to menu using this method.

        :param name:
            The string name that identifies the menu.
        :param href:
            Override the generated href for the menu.
            You can use an url string or an endpoint name
        :param icon:
            Font-Awesome icon name, optional.
        :param label:
            The label that will be displayed on the menu,
            if absent param name will be used
        :param category:
            The menu category where the menu will be included,
            if non provided the view will be accessible as a top menu.
        :param category_icon:
            Font-Awesome icon name for the category, optional.
        :param category_label:
            The label that will be displayed on the menu,
            if absent param name will be used
        :param baseview:
            A BaseView type class instantiated.
        :param cond:
            If a callable, :code:`cond` will be invoked when
            constructing the menu items. If it returns :code:`True`,
            then this link will be a part of the menu. Otherwise, it
            will not be included in the menu items. Defaults to
            :code:`None`, meaning the item will always be present.
        """
        ...

    def add_separator(self, category, cond=...):  # -> None:
        """
        Add a separator to the menu, you will sequentially create the menu.

        :param category:
            The menu category where the separator will be included.
        :param cond:
            If a callable, :code:`cond` will be invoked when
            constructing the menu items. If it returns :code:`True`,
            then this separator will be a part of the menu. Otherwise,
            it will not be included in the menu items. Defaults to
            :code:`None`, meaning the separator will always be present.
        """
        ...

    def add_view_no_menu(self, baseview, endpoint=..., static_folder=...):  # -> object:
        """
        Add your views without creating a menu.

        :param baseview: A BaseView type class instantiated.
        """
        ...

    def security_cleanup(self):  # -> None:
        """
        Clean up security.

        This method is useful if you have changed the name of your menus or
        classes. Changing them leaves behind permissions that are not associated
        with anything. You can use it always or just sometimes to perform a
        security cleanup.

        .. warning::

            This deletes any permission that is no longer part of any registered
            view or menu. Only invoke AFTER YOU HAVE REGISTERED ALL VIEWS.
        """
        ...

    def security_converge(self, dry=...) -> dict:
        """
        Migrates all permissions to the new names on all the Roles.

        This method is useful when you use:

        - ``class_permission_name``
        - ``previous_class_permission_name``
        - ``method_permission_name``
        - ``previous_method_permission_name``

        :param dry: If True will not change DB
        :return: Dict with all computed necessary operations
        """
        ...

    def get_url_for_login_with(self, next_url: str | None = ...) -> str: ...
    @property
    def get_url_for_login(self):  # -> str:
        ...
    @property
    def get_url_for_index(self):  # -> str:
        ...
    def get_url_for_locale(self, lang):  # -> str:
        ...
    def add_limits(self, baseview) -> None: ...
    def add_permissions(self, update_perms=...):  # -> None:
        ...
    def register_blueprint(self, baseview, endpoint=..., static_folder=...):  # -> None:
        ...

def init_appbuilder(app: Flask) -> AirflowAppBuilder:
    """Init `Flask App Builder <https://flask-appbuilder.readthedocs.io/en/latest/>`__."""
    ...
