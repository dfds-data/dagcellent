"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING

from airflow.utils.log.logging_mixin import LoggingMixin
from flask_limiter import Limiter

EXISTING_ROLES = ...
if TYPE_CHECKING: ...

class AirflowSecurityManagerV2(LoggingMixin):
    """
    Custom security manager, which introduces a permission model adapted to Airflow.

    It's named V2 to differentiate it from the obsolete airflow.www.security.AirflowSecurityManager.
    """

    def __init__(self, appbuilder) -> None: ...
    @staticmethod
    def before_request():  # -> None:
        """Run hook before request."""
        ...

    def create_limiter(self) -> Limiter: ...
    def register_views(self):  # -> None:
        """Allow auth managers to register their own views. By default, do nothing."""
        ...

    def has_access(
        self,
        action_name: str,
        resource_name: str,
        user=...,
        resource_pk: str | None = ...,
    ) -> bool:
        """
        Verify whether a given user could perform a certain action on the given resource.

        Example actions might include can_read, can_write, can_delete, etc.

        This function is called by FAB when accessing a view. See
        https://github.com/dpgaspar/Flask-AppBuilder/blob/c6fecdc551629e15467fde5d06b4437379d90592/flask_appbuilder/security/decorators.py#L134

        :param action_name: action_name on resource (e.g can_read, can_edit).
        :param resource_name: name of view-menu or resource.
        :param user: user
        :param resource_pk: the resource primary key (e.g. the connection ID)
        :return: Whether user could perform certain action on the resource.
        """
        ...

    def create_admin_standalone(self) -> tuple[str | None, str | None]:
        """
        Perform the required steps when initializing airflow for standalone mode.

        If necessary, returns the username and password to be printed in the console for users to log in.
        """
        ...

    def add_limit_view(self, baseview):  # -> None:
        ...
    def add_permissions_view(self, base_action_names, resource_name):  # -> None:
        ...
    def add_permissions_menu(self, resource_name):  # -> None:
        ...
