"""
This type stub file was generated by pyright.
"""

from airflow.compat.functools import cache
from flask_appbuilder.forms import DynamicForm
from flask_wtf import FlaskForm
from wtforms.fields import Field

class DateTimeWithTimezoneField(Field):
    """A text field which stores a `datetime.datetime` matching a format."""

    widget = ...
    def __init__(
        self, label=..., validators=..., datetime_format=..., **kwargs
    ) -> None: ...
    def process_formdata(self, valuelist):  # -> None:
        ...

class DateTimeForm(FlaskForm):
    """Date filter form needed for task views."""

    execution_date = ...

class DagRunEditForm(DynamicForm):
    """
    Form for editing DAG Run.

    Only note field is editable, so everything else is read-only here.
    """

    dag_id = ...
    start_date = ...
    end_date = ...
    run_id = ...
    state = ...
    execution_date = ...
    conf = ...
    note = ...
    def populate_obj(self, item):  # -> None:
        """Populate the attributes of the passed obj with data from the form's not-read-only fields."""
        ...

class TaskInstanceEditForm(DynamicForm):
    """
    Form for editing TaskInstance.

    Only note and state fields are editable, so everything else is read-only here.
    """

    dag_id = ...
    task_id = ...
    start_date = ...
    end_date = ...
    state = ...
    execution_date = ...
    note = ...
    def populate_obj(self, item):  # -> None:
        """Populate the attributes of the passed obj with data from the form's not-read-only fields."""
        ...

@cache
def create_connection_form_class() -> type[DynamicForm]:
    """
    Create a form class for editing and adding Connection.

    This class is created dynamically because it relies heavily on run-time
    provider discovery, which slows down webserver startup a lot.
    By creating the class at runtime, we can delay loading the providers until
    when the connection form is first used, which may as well be never for a
    short-lived server.
    """
    class ConnectionForm(DynamicForm): ...
