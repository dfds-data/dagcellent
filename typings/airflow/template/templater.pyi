"""
This type stub file was generated by pyright.
"""

from collections.abc import Collection, Iterable, Sequence
from dataclasses import dataclass
from typing import TYPE_CHECKING, Any

import jinja2
from airflow import DAG
from airflow.models.operator import Operator
from airflow.utils.context import Context
from airflow.utils.log.logging_mixin import LoggingMixin
from airflow.utils.mixins import ResolveMixin

if TYPE_CHECKING: ...

@dataclass(frozen=True)
class LiteralValue(ResolveMixin):
    """
    A wrapper for a value that should be rendered as-is, without applying jinja templating to its contents.

    :param value: The value to be rendered without templating
    """

    value: Any
    def iter_references(self) -> Iterable[tuple[Operator, str]]: ...
    def resolve(self, context: Context, *, include_xcom: bool = ...) -> Any: ...

class Templater(LoggingMixin):
    """
    This renders the template fields of object.

    :meta private:
    """

    template_fields: Collection[str]
    template_ext: Sequence[str]
    def get_template_env(self, dag: DAG | None = ...) -> jinja2.Environment:
        """Fetch a Jinja template environment from the DAG or instantiate empty environment if no DAG."""
        ...

    def prepare_template(self) -> None:
        """
        Execute after the templated fields get replaced by their content.

        If you need your object to alter the content of the file before the
        template is rendered, it should override this method to do so.
        """
        ...

    def resolve_template_files(self) -> None:
        """Get the content of files for template_field / template_ext."""
        ...

    def render_template(
        self,
        content: Any,
        context: Context,
        jinja_env: jinja2.Environment | None = ...,
        seen_oids: set[int] | None = ...,
    ) -> Any:
        """
        Render a templated string.

        If *content* is a collection holding multiple templated strings, strings
        in the collection will be templated recursively.

        :param content: Content to template. Only strings can be templated (may
            be inside a collection).
        :param context: Dict with values to apply on templated content
        :param jinja_env: Jinja environment. Can be provided to avoid
            re-creating Jinja environments during recursion.
        :param seen_oids: template fields already rendered (to avoid
            *RecursionError* on circular dependencies)
        :return: Templated content
        """
        ...
