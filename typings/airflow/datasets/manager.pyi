"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from typing import TYPE_CHECKING

from airflow.api_internal.internal_api_call import internal_api_call
from airflow.datasets import Dataset
from airflow.models.dataset import DatasetEvent, DatasetModel
from airflow.models.taskinstance import TaskInstance
from airflow.utils.log.logging_mixin import LoggingMixin
from airflow.utils.session import provide_session
from sqlalchemy.orm.session import Session

if TYPE_CHECKING: ...

class DatasetManager(LoggingMixin):
    """
    A pluggable class that manages operations for datasets.

    The intent is to have one place to handle all Dataset-related operations, so different
    Airflow deployments can use plugins that broadcast dataset events to each other.
    """

    def __init__(self, **kwargs) -> None: ...
    def create_datasets(
        self, dataset_models: list[DatasetModel], session: Session
    ) -> None:
        """Create new datasets."""
        ...

    @classmethod
    @internal_api_call
    @provide_session
    def register_dataset_change(
        cls,
        *,
        task_instance: TaskInstance | None = ...,
        dataset: Dataset,
        extra=...,
        session: Session = ...,
        source_alias_names: Iterable[str] | None = ...,
        **kwargs,
    ) -> DatasetEvent | None:
        """
        Register dataset related changes.

        For local datasets, look them up, record the dataset event, queue dagruns, and broadcast
        the dataset event
        """
        ...

    def notify_dataset_created(self, dataset: Dataset):  # -> None:
        """Run applicable notification actions when a dataset is created."""
        ...

    @classmethod
    def notify_dataset_changed(cls, dataset: Dataset):  # -> None:
        """Run applicable notification actions when a dataset is changed."""
        ...

def resolve_dataset_manager() -> DatasetManager:
    """Retrieve the dataset manager."""
    ...

dataset_manager = ...
