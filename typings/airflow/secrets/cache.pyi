"""
This type stub file was generated by pyright.
"""

import datetime
import multiprocessing

class SecretCache:
    """A static class to manage the global secret cache."""

    __manager: multiprocessing.managers.SyncManager | None = ...
    _cache: dict[str, _CacheValue] | None = ...
    _ttl: datetime.timedelta
    class NotPresentException(Exception):
        """Raised when a key is not present in the cache."""

        ...

    class _CacheValue:
        def __init__(self, value: str | None) -> None: ...
        def is_expired(self, ttl: datetime.timedelta) -> bool: ...

    _VARIABLE_PREFIX = ...
    _CONNECTION_PREFIX = ...
    @classmethod
    def init(cls):  # -> None:
        """
        Initialize the cache, provided the configuration allows it.

        Safe to call several times.
        """
        ...

    @classmethod
    def reset(cls):  # -> None:
        """Use for test purposes only."""
        ...

    @classmethod
    def get_variable(cls, key: str) -> str | None:
        """
        Try to get the value associated with the key from the cache.

        :return: The saved value (which can be None) if present in cache and not expired,
            a NotPresent exception otherwise.
        """
        ...

    @classmethod
    def get_connection_uri(cls, conn_id: str) -> str:
        """
        Try to get the uri associated with the conn_id from the cache.

        :return: The saved uri if present in cache and not expired,
            a NotPresent exception otherwise.
        """
        ...

    @classmethod
    def save_variable(cls, key: str, value: str | None):  # -> None:
        """Save the value for that key in the cache, if initialized."""
        ...

    @classmethod
    def save_connection_uri(cls, conn_id: str, uri: str):  # -> None:
        """Save the uri representation for that connection in the cache, if initialized."""
        ...

    @classmethod
    def invalidate_variable(cls, key: str):  # -> None:
        """Invalidate (actually removes) the value stored in the cache for that Variable."""
        ...
