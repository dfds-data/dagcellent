"""
This type stub file was generated by pyright.
"""

import json
from typing import Any

from flask.json.provider import JSONProvider

class AirflowJsonProvider(JSONProvider):
    """JSON Provider for Flask app to use WebEncoder."""

    ensure_ascii: bool = ...
    sort_keys: bool = ...
    def dumps(self, obj, **kwargs):  # -> str:
        ...
    def loads(self, s: str | bytes, **kwargs):  # -> Any:
        ...

class WebEncoder(json.JSONEncoder):
    """
    This encodes values into a web understandable format. There is no deserializer.

    This parses datetime, dates, Decimal and bytes. In order to parse the custom
    classes and the other types, and since it's just to show the result in the UI,
    we return repr(object) for everything else.
    """

    def default(self, o: Any) -> Any: ...

class XComEncoder(json.JSONEncoder):
    """This encoder serializes any object that has attr, dataclass or a custom serializer."""

    def default(self, o: object) -> Any: ...
    def encode(self, o: Any) -> str: ...

class XComDecoder(json.JSONDecoder):
    """Deserialize dicts to objects if they contain the `__classname__` key, otherwise return the dict."""

    def __init__(self, *args, **kwargs) -> None: ...
    def object_hook(self, dct: dict) -> object: ...
    @staticmethod
    def orm_object_hook(dct: dict) -> object:
        """Create a readable representation of a serialized object."""
        ...

AirflowJsonEncoder = WebEncoder
