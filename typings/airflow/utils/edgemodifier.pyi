"""
This type stub file was generated by pyright.
"""

from collections.abc import Sequence

from airflow.models.taskmixin import DependencyMixin

class EdgeModifier(DependencyMixin):
    """
    Class that represents edge information to be added between two tasks/operators.

    Has shorthand factory functions, like Label("hooray").

    Current implementation supports
        t1 >> Label("Success route") >> t2
        t2 << Label("Success route") << t2

    Note that due to the potential for use in either direction, this waits
    to make the actual connection between both sides until both are declared,
    and will do so progressively if multiple ups/downs are added.

    This and EdgeInfo are related - an EdgeModifier is the Python object you
    use to add information to (potentially multiple) edges, and EdgeInfo
    is the representation of the information for one specific edge.
    """

    def __init__(self, label: str | None = ...) -> None: ...
    @property
    def roots(self):  # -> list[DependencyMixin]:
        ...
    @property
    def leaves(self):  # -> list[DependencyMixin]:
        ...
    def set_upstream(
        self,
        other: DependencyMixin | Sequence[DependencyMixin],
        edge_modifier: EdgeModifier | None = ...,
    ):  # -> None:
        """
        Set the given task/list onto the upstream attribute, then attempt to resolve the relationship.

        Providing this also provides << via DependencyMixin.
        """
        ...

    def set_downstream(
        self,
        other: DependencyMixin | Sequence[DependencyMixin],
        edge_modifier: EdgeModifier | None = ...,
    ):  # -> None:
        """
        Set the given task/list onto the downstream attribute, then attempt to resolve the relationship.

        Providing this also provides >> via DependencyMixin.
        """
        ...

    def update_relative(
        self,
        other: DependencyMixin,
        upstream: bool = ...,
        edge_modifier: EdgeModifier | None = ...,
    ) -> None:
        """Update relative if we're not the "main" side of a relationship; still run the same logic."""
        ...

    def add_edge_info(self, dag, upstream_id: str, downstream_id: str):  # -> None:
        """
        Add or update task info on the DAG for this specific pair of tasks.

        Called either from our relationship trigger methods above, or directly
        by set_upstream/set_downstream in operators.
        """
        ...

def Label(label: str):  # -> EdgeModifier:
    """Create an EdgeModifier that sets a human-readable label on the edge."""
    ...
