"""
This type stub file was generated by pyright.
"""

import contextlib
from collections.abc import Callable, Generator
from typing import TypeVar

from airflow.typing_compat import ParamSpec
from sqlalchemy.orm import Session as SASession

@contextlib.contextmanager
def create_session() -> Generator[SASession, None, None]:
    """Contextmanager that will create and teardown a session."""
    ...

PS = ParamSpec("PS")
RT = TypeVar("RT")

def find_session_idx(func: Callable[PS, RT]) -> int:
    """Find session index in function call parameter."""
    ...

def provide_session(func: Callable[PS, RT]) -> Callable[PS, RT]:
    """
    Provide a session if it isn't provided.

    If you want to reuse a session or run the function as part of a
    database transaction, you pass it to the function, if not this wrapper
    will create one and close it for you.
    """
    ...

NEW_SESSION: SASession = ...
