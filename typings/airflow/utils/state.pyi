"""
This type stub file was generated by pyright.
"""

from enum import Enum

class JobState(str, Enum):
    """All possible states that a Job can be in."""

    RUNNING = ...
    SUCCESS = ...
    RESTARTING = ...
    FAILED = ...
    def __str__(self) -> str: ...

class TaskInstanceState(str, Enum):
    """
    All possible states that a Task Instance can be in.

    Note that None is also allowed, so always use this in a type hint with Optional.
    """

    REMOVED = ...
    SCHEDULED = ...
    QUEUED = ...
    RUNNING = ...
    SUCCESS = ...
    RESTARTING = ...
    FAILED = ...
    UP_FOR_RETRY = ...
    UP_FOR_RESCHEDULE = ...
    UPSTREAM_FAILED = ...
    SKIPPED = ...
    DEFERRED = ...
    SHUTDOWN = ...
    def __str__(self) -> str: ...

class DagRunState(str, Enum):
    """
    All possible states that a DagRun can be in.

    These are "shared" with TaskInstanceState in some parts of the code,
    so please ensure that their values always match the ones with the
    same name in TaskInstanceState.
    """

    QUEUED = ...
    RUNNING = ...
    SUCCESS = ...
    FAILED = ...
    def __str__(self) -> str: ...

class State:
    """Static class with task instance state constants and color methods to avoid hard-coding."""

    SUCCESS = ...
    RUNNING = ...
    FAILED = ...
    NONE = ...
    REMOVED = ...
    SCHEDULED = ...
    QUEUED = ...
    RESTARTING = ...
    UP_FOR_RETRY = ...
    UP_FOR_RESCHEDULE = ...
    UPSTREAM_FAILED = ...
    SKIPPED = ...
    DEFERRED = ...
    SHUTDOWN = ...
    finished_dr_states: frozenset[DagRunState] = ...
    unfinished_dr_states: frozenset[DagRunState] = ...
    task_states: tuple[TaskInstanceState | None, ...] = ...
    dag_states: tuple[DagRunState, ...] = ...
    state_color: dict[TaskInstanceState | None, str] = ...
    @classmethod
    def color(cls, state):  # -> str:
        """Return color for a state."""
        ...

    @classmethod
    def color_fg(cls, state):  # -> Literal['white', 'black']:
        """Black&white colors for a state."""
        ...

    finished: frozenset[TaskInstanceState] = ...
    unfinished: frozenset[TaskInstanceState | None] = ...
    failed_states: frozenset[TaskInstanceState] = ...
    success_states: frozenset[TaskInstanceState] = ...
    terminating_states = ...
    adoptable_states = ...
