"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterator
from functools import cached_property
from typing import TYPE_CHECKING

from airflow.models.taskinstance import TaskInstance
from airflow.utils.session import provide_session
from sqlalchemy.orm.session import Session

if TYPE_CHECKING: ...

class TaskLogReader:
    """Task log reader."""

    STREAM_LOOP_SLEEP_SECONDS = ...
    def read_log_chunks(
        self, ti: TaskInstance, try_number: int | None, metadata
    ) -> tuple[list[tuple[tuple[str, str]]], dict[str, str]]:
        """
        Read chunks of Task Instance logs.

        :param ti: The taskInstance
        :param try_number: If provided, logs for the given try will be returned.
            Otherwise, logs from all attempts are returned.
        :param metadata: A dictionary containing information about how to read the task log

        The following is an example of how to use this method to read log:

        .. code-block:: python

            logs, metadata = task_log_reader.read_log_chunks(ti, try_number, metadata)
            logs = logs[0] if try_number is not None else logs

        where task_log_reader is an instance of TaskLogReader. The metadata will always
        contain information about the task log which can enable you read logs to the
        end.
        """
        ...

    def read_log_stream(
        self, ti: TaskInstance, try_number: int | None, metadata: dict
    ) -> Iterator[str]:
        """
        Continuously read log to the end.

        :param ti: The Task Instance
        :param try_number: the task try number
        :param metadata: A dictionary containing information about how to read the task log
        """
        ...

    @cached_property
    def log_handler(self):  # -> Handler | None:
        """Get the log handler which is configured to read logs."""
        ...

    @property
    def supports_read(self):  # -> bool:
        """Checks if a read operation is supported by a current log handler."""
        ...

    @property
    def supports_external_link(self) -> bool:
        """Check if the logging handler supports external links (e.g. to Elasticsearch, Stackdriver, etc)."""
        ...

    @provide_session
    def render_log_filename(
        self, ti: TaskInstance, try_number: int | None = ..., *, session: Session = ...
    ) -> str:
        """
        Render the log attachment filename.

        :param ti: The task instance
        :param try_number: The task try number
        """
        ...
