"""
This type stub file was generated by pyright.
"""

import logging
from collections.abc import Iterable, Iterator
from re import Pattern
from typing import (
    TYPE_CHECKING,
    Any,
    TextIO,
    TypeVar,
    Union,
)

from airflow.compat.functools import cache
from kubernetes.client import V1EnvVar

"""Mask sensitive information from logs."""
if TYPE_CHECKING: ...
Redactable = TypeVar(
    "Redactable", str, "V1EnvVar", dict[Any, Any], tuple[Any, ...], list[Any]
)
Redacted = Union[Redactable, str]
log = ...
DEFAULT_SENSITIVE_FIELDS = ...
SECRETS_TO_SKIP_MASKING_FOR_TESTS = ...

@cache
def get_sensitive_variables_fields():  # -> frozenset[str]:
    """Get comma-separated sensitive Variable Fields from airflow.cfg."""
    ...

def should_hide_value_for_key(name):  # -> bool:
    """
    Return if the value for this given name should be hidden.

    Name might be a Variable name, or key in conn.extra_dejson, for example.
    """
    ...

def mask_secret(secret: str | dict | Iterable, name: str | None = ...) -> None:
    """
    Mask a secret from appearing in the task logs.

    If ``name`` is provided, then it will only be masked if the name matches
    one of the configured "sensitive" names.

    If ``secret`` is a dict or a iterable (excluding str) then it will be
    recursively walked and keys with sensitive names will be hidden.
    """
    ...

def redact(
    value: Redactable, name: str | None = ..., max_depth: int | None = ...
) -> Redacted:
    """Redact any secrets found in ``value``."""
    ...

class SecretsMasker(logging.Filter):
    """Redact secrets from logs."""

    replacer: Pattern | None = ...
    patterns: set[str]
    ALREADY_FILTERED_FLAG = ...
    MAX_RECURSION_DEPTH = ...
    def __init__(self) -> None: ...
    def filter(self, record) -> bool: ...
    def redact(
        self, item: Redactable, name: str | None = ..., max_depth: int | None = ...
    ) -> Redacted:
        """
        Redact an any secrets found in ``item``, if it is a string.

        If ``name`` is given, and it's a "sensitive" name (see
        :func:`should_hide_value_for_key`) then all string values in the item
        is redacted.
        """
        ...

    def add_mask(
        self, secret: str | dict | Iterable, name: str | None = ...
    ):  # -> None:
        """Add a new secret to be masked to this filter instance."""
        ...

class RedactedIO(TextIO):
    """
    IO class that redacts values going into stdout.

    Expected usage::

        with contextlib.redirect_stdout(
            RedactedIO()
        ): ...  # Writes to stdout will be redacted.
    """

    def __init__(self) -> None: ...
    def __enter__(self) -> TextIO: ...
    def __exit__(self, t, v, b) -> None: ...
    def __iter__(self) -> Iterator[str]: ...
    def __next__(self) -> str: ...
    def close(self) -> None: ...
    def fileno(self) -> int: ...
    def flush(self) -> None: ...
    def isatty(self) -> bool: ...
    def read(self, n: int = ...) -> str: ...
    def readable(self) -> bool: ...
    def readline(self, n: int = ...) -> str: ...
    def readlines(self, n: int = ...) -> list[str]: ...
    def seek(self, offset: int, whence: int = ...) -> int: ...
    def seekable(self) -> bool: ...
    def tell(self) -> int: ...
    def truncate(self, s: int | None = ...) -> int: ...
    def writable(self) -> bool: ...
    def write(self, s: str) -> int: ...
    def writelines(self, lines) -> None: ...
