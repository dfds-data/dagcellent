"""
This type stub file was generated by pyright.
"""

import abc
import enum
import logging
from io import IOBase
from logging import Logger, StreamHandler
from typing import IO, TYPE_CHECKING, TypeVar

if TYPE_CHECKING: ...
ANSI_ESCAPE = ...

class SetContextPropagate(enum.Enum):
    """
    Sentinel objects for log propagation contexts.

    :meta private:
    """

    MAINTAIN_PROPAGATE = ...
    DISABLE_PROPAGATE = ...

def __getattr__(name):  # -> Literal[SetContextPropagate.DISABLE_PROPAGATE]:
    ...
def remove_escape_codes(text: str) -> str:
    """Remove ANSI escapes codes from string; used to remove "colors" from log messages."""
    ...

_T = TypeVar("_T")

class LoggingMixin:
    """Convenience super-class to have a logger configured with the class name."""

    _log: logging.Logger | None = ...
    _log_config_logger_name: str | None = ...
    _logger_name: str | None = ...
    def __init__(self, context=...) -> None: ...
    @classmethod
    def logger(cls) -> Logger:
        """Return a logger."""
        ...

    @property
    def log(self) -> Logger:
        """Return a logger."""
        ...

class ExternalLoggingMixin:
    """Define a log handler based on an external service (e.g. ELK, StackDriver)."""

    @property
    @abc.abstractmethod
    def log_name(self) -> str:
        """Return log name."""
        ...

    @abc.abstractmethod
    def get_external_log_url(self, task_instance, try_number) -> str:
        """Return the URL for log visualization in the external service."""
        ...

    @property
    @abc.abstractmethod
    def supports_external_link(self) -> bool:
        """Return whether handler is able to support external links."""
        ...

class StreamLogWriter(IOBase, IO[str]):
    """
    Allows to redirect stdout and stderr to logger.

    :param log: The log level method to write to, ie. log.debug, log.warning
    """

    encoding: None = ...
    def __init__(self, logger, level) -> None: ...
    def close(self):  # -> None:
        """
        Provide close method, for compatibility with the io.IOBase interface.

        This is a no-op method.
        """
        ...

    @property
    def closed(self):  # -> Literal[False]:
        """
        Return False to indicate that the stream is not closed.

        Streams will be open for the duration of Airflow's lifecycle.

        For compatibility with the io.IOBase interface.
        """
        ...

    def write(self, message):  # -> None:
        """
        Do whatever it takes to actually log the specified logging record.

        :param message: message to log
        """
        ...

    def flush(self):  # -> None:
        """Ensure all logging output has been flushed."""
        ...

    def isatty(self):  # -> Literal[False]:
        """
        Return False to indicate the fd is not connected to a tty(-like) device.

        For compatibility reasons.
        """
        ...

class RedirectStdHandler(StreamHandler):
    """
    Custom StreamHandler that uses current sys.stderr/stdout as the stream for logging.

    This class is like a StreamHandler using sys.stderr/stdout, but uses
    whatever sys.stderr/stdout is currently set to rather than the value of
    sys.stderr/stdout at handler construction time, except when running a
    task in a kubernetes executor pod.
    """

    def __init__(self, stream) -> None: ...
    @property
    def stream(self):  # -> TextIO | Any:
        """Returns current stream."""
        ...

def set_context(logger, value):  # -> None:
    """
    Walk the tree of loggers and try to set the context for each handler.

    :param logger: logger
    :param value: value to set
    """
    ...
