"""
This type stub file was generated by pyright.
"""

import enum
from datetime import datetime
from typing import TYPE_CHECKING

from airflow.typing_compat import TypedDict

if TYPE_CHECKING: ...

class ArgNotSet:
    """
    Sentinel type for annotations, useful when None is not viable.

    Use like this::

        def is_arg_passed(arg: Union[ArgNotSet, None] = NOTSET) -> bool:
            if arg is NOTSET:
                return False
            return True

        is_arg_passed()  # False.
        is_arg_passed(None)  # True.
    """

    ...

NOTSET = ...

class AttributeRemoved:
    """
    Sentinel type to signal when attribute removed on serialization.

    :meta private:
    """

    def __init__(self, attribute_name: str) -> None: ...
    def __getattr__(self, item):  # -> Any:
        ...

class DagRunType(str, enum.Enum):
    """Class with DagRun types."""

    BACKFILL_JOB = ...
    SCHEDULED = ...
    MANUAL = ...
    DATASET_TRIGGERED = ...
    def __str__(self) -> str: ...
    def generate_run_id(self, logical_date: datetime) -> str: ...
    @staticmethod
    def from_run_id(run_id: str) -> DagRunType:
        """Resolve DagRun type from run_id."""
        ...

class EdgeInfoType(TypedDict):
    """Extra metadata that the DAG can store about an edge, usually generated from an EdgeModifier."""

    label: str | None
    ...
