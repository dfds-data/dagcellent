"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from typing import TYPE_CHECKING, TypeVar

from airflow.models.dag import DAG
from airflow.utils.session import provide_session
from sqlalchemy.orm import Session

"""Utilities module for cli."""
T = TypeVar("T", bound=Callable)
if TYPE_CHECKING: ...
logger = ...

def action_cli(func=..., check_db=...):  # -> Callable[..., T]:
    ...
def process_subdir(subdir: str | None):  # -> str | None:
    """Expand path to absolute by replacing 'DAGS_FOLDER', '~', '.', etc."""
    ...

def get_dag_by_file_location(dag_id: str):  # -> DAG:
    """Return DAG of a given dag_id by looking up file location."""
    ...

def get_dag(subdir: str | None, dag_id: str, from_db: bool = ...) -> DAG:
    """
    Return DAG of a given dag_id.

    First we'll try to use the given subdir.  If that doesn't work, we'll try to
    find the correct path (assuming it's a file) and failing that, use the configured
    dags folder.
    """
    ...

def get_dags(subdir: str | None, dag_id: str, use_regex: bool = ...):  # -> list[DAG]:
    """Return DAG(s) matching a given regex or dag_id."""
    ...

@provide_session
def get_dag_by_pickle(pickle_id: int, session: Session = ...) -> DAG:
    """Fetch DAG from the database using pickling."""
    ...

def setup_locations(
    process, pid=..., stdout=..., stderr=..., log=...
):  # -> tuple[str | Any, str | Any, str | Any, str | Any]:
    """Create logging paths."""
    ...

def setup_logging(filename):  # -> TextIOWrapper[_WrappedBuffer]:
    """Create log file handler for daemon process."""
    ...

def sigint_handler(sig, frame):
    """
    Return without error on SIGINT or SIGTERM signals in interactive command mode.

    e.g. CTRL+C or kill <PID>
    """
    ...

def sigquit_handler(sig, frame):  # -> None:
    """
    Help debug deadlocks by printing stacktraces when this gets a SIGQUIT.

    e.g. kill -s QUIT <PID> or CTRL+
    """
    ...

class ColorMode:
    """Coloring modes. If `auto` is then automatically detected."""

    ON = ...
    OFF = ...
    AUTO = ...

def should_use_colors(args) -> bool:
    """Process arguments and decide whether to enable color in output."""
    ...

def should_ignore_depends_on_past(args) -> bool: ...
def suppress_logs_and_warning(f: T) -> T:
    """Suppress logging and warning messages in cli functions."""
    ...
