"""
This type stub file was generated by pyright.
"""

import abc
from collections.abc import Callable, Iterable
from re import Pattern

log = ...

class MetricNameLengthExemptionWarning(Warning):
    """
    A Warning class to be used for the metric name length exemption notice.

    Using a custom Warning class allows us to easily test that it is used.
    """

    ...

ALLOWED_CHARACTERS = ...
BACK_COMPAT_METRIC_NAME_PATTERNS: set[str] = ...
BACK_COMPAT_METRIC_NAMES: set[Pattern[str]] = ...
OTEL_NAME_MAX_LENGTH = ...
DEFAULT_VALIDATOR_TYPE = ...

def get_validator() -> ListValidator: ...
def validate_stat(fn: Callable) -> Callable:
    """Check if stat name contains invalid characters; logs and does not emit stats if name is invalid."""
    ...

def stat_name_otel_handler(
    stat_prefix: str, stat_name: str, max_length: int = ...
) -> str:
    """
    Verify that a proposed prefix and name combination will meet OpenTelemetry naming standards.

    See: https://opentelemetry.io/docs/reference/specification/metrics/api/#instrument-name-syntax

    :param stat_prefix: The proposed prefix applied to all metric names.
    :param stat_name: The proposed name.
    :param max_length: The max length of the combined prefix and name; defaults to the max length
        as defined in the OpenTelemetry standard, but can be overridden.

    :returns: Returns the approved combined name or raises an InvalidStatsNameException.
    """
    ...

def stat_name_default_handler(
    stat_name: str, max_length: int = ..., allowed_chars: Iterable[str] = ...
) -> str:
    """
    Validate the metric stat name.

    Apply changes when necessary and return the transformed stat name.
    """
    ...

def get_current_handler_stat_name_func() -> Callable[[str], str]:
    """Get Stat Name Handler from airflow.cfg."""
    ...

class ListValidator(metaclass=abc.ABCMeta):
    """
    ListValidator metaclass that can be implemented as a AllowListValidator or BlockListValidator.

    The test method must be overridden by its subclass.
    """

    def __init__(self, validate_list: str | None = ...) -> None: ...
    @classmethod
    def __subclasshook__(cls, subclass: Callable[[str], str]) -> bool: ...
    @abc.abstractmethod
    def test(self, name: str) -> bool:
        """Test if name is allowed."""
        ...

class AllowListValidator(ListValidator):
    """AllowListValidator only allows names that match the allowed prefixes."""

    def test(self, name: str) -> bool: ...

class PatternAllowListValidator(ListValidator):
    """Match the provided strings anywhere in the metric name."""

    def test(self, name: str) -> bool: ...

class BlockListValidator(ListValidator):
    """BlockListValidator only allows names that do not match the blocked prefixes."""

    def test(self, name: str) -> bool: ...

class PatternBlockListValidator(ListValidator):
    """Only allow names that do not match the blocked strings."""

    def test(self, name: str) -> bool: ...
