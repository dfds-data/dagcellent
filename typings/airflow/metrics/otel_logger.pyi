"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from typing import TYPE_CHECKING, Union

from airflow.metrics.protocols import DeltaType, Timer, TimerProtocol
from airflow.metrics.validators import ListValidator
from opentelemetry.metrics import Observation
from opentelemetry.util.types import Attributes

if TYPE_CHECKING: ...
log = ...
GaugeValues = Union[int, float]
DEFAULT_GAUGE_VALUE = ...
UP_DOWN_COUNTERS = ...
DEFAULT_METRIC_NAME_PREFIX = ...
DEFAULT_METRIC_NAME_DELIMITER = ...

def full_name(name: str, *, prefix: str = ...) -> str:
    """Assembles the prefix, delimiter, and name and returns it as a string."""
    ...

def name_is_otel_safe(prefix: str, name: str) -> bool:
    """
    Return True if the provided name and prefix would result in a name that meets the OpenTelemetry standard.

    Legal names are defined here:
    https://opentelemetry.io/docs/reference/specification/metrics/api/#instrument-name-syntax
    """
    ...

class _OtelTimer(Timer):
    """
    An implementation of Stats.Timer() which records the result in the OTel Metrics Map.

    OpenTelemetry does not have a native timer, we will store the values as a Gauge.

    :param name: The name of the timer.
    :param tags: Tags to append to the timer.
    """

    def __init__(
        self, otel_logger: SafeOtelLogger, name: str | None, tags: Attributes
    ) -> None: ...
    def stop(self, send: bool = ...) -> None: ...

class SafeOtelLogger:
    """Otel Logger."""

    def __init__(
        self, otel_provider, prefix: str = ..., metrics_validator: ListValidator = ...
    ) -> None: ...
    def incr(
        self, stat: str, count: int = ..., rate: float = ..., tags: Attributes = ...
    ):  # -> None:
        """
        Increment stat by count.

        :param stat: The name of the stat to increment.
        :param count: A positive integer to add to the current value of stat.
        :param rate: value between 0 and 1 that represents the sample rate at
            which the metric is going to be emitted.
        :param tags: Tags to append to the stat.
        """
        ...

    def decr(
        self, stat: str, count: int = ..., rate: float = ..., tags: Attributes = ...
    ):  # -> None:
        """
        Decrement stat by count.

        :param stat: The name of the stat to decrement.
        :param count: A positive integer to subtract from current value of stat.
        :param rate: value between 0 and 1 that represents the sample rate at
            which the metric is going to be emitted.
        :param tags: Tags to append to the stat.
        """
        ...

    def gauge(
        self,
        stat: str,
        value: int | float,
        rate: float = ...,
        delta: bool = ...,
        *,
        tags: Attributes = ...,
        back_compat_name: str = ...,
    ) -> None:
        """
        Record a new value for a Gauge.

        :param stat: The name of the stat to update.
        :param value: The new value of stat, either a float or an int.
        :param rate: value between 0 and 1 that represents the sample rate at
            which the metric is going to be emitted.
        :param delta: If true, the provided value will be added to the previous value.
            If False the new value will override the previous.
        :param tags: Tags to append to the stat.
        :param back_compat_name:  If an alternative name is provided, the
            stat will be emitted using both names if possible.
        """
        ...

    def timing(self, stat: str, dt: DeltaType, *, tags: Attributes = ...) -> None:
        """OTel does not have a native timer, stored as a Gauge whose value is number of seconds elapsed."""
        ...

    def timer(
        self, stat: str | None = ..., *args, tags: Attributes = ..., **kwargs
    ) -> TimerProtocol:
        """Timer context manager returns the duration and can be cancelled."""
        ...

class MetricsMap:
    """Stores Otel Instruments."""

    def __init__(self, meter) -> None: ...
    def clear(self) -> None: ...
    def get_counter(self, name: str, attributes: Attributes = ...):
        """
        Return the counter; creates a new one if it did not exist.

        :param name: The name of the counter to fetch or create.
        :param attributes:  Counter attributes, used to generate a unique key to store the counter.
        """
        ...

    def del_counter(self, name: str, attributes: Attributes = ...) -> None:
        """
        Delete a counter.

        :param name: The name of the counter to delete.
        :param attributes: Counter attributes which were used to generate a unique key to store the counter.
        """
        ...

    def set_gauge_value(
        self, name: str, value: float | None, delta: bool, tags: Attributes
    ):  # -> None:
        """
        Override the last reading for a Gauge with a new value.

        :param name: The name of the gauge to record.
        :param value: The new reading to record.
        :param delta: If True, value is added to the previous reading, else it overrides.
        :param tags: Gauge attributes which were used to generate a unique key to store the counter.
        :returns: None
        """
        ...

    def read_gauge(self, key: str, *args) -> Iterable[Observation]:
        """Return the Observation for the provided key; callback for the Observable Gauges."""
        ...

    def poke_gauge(self, name: str, attributes: Attributes = ...) -> GaugeValues:
        """
        Return the value of the gauge; creates a new one with the default value if it did not exist.

        :param name: The name of the gauge to fetch or create.
        :param attributes:  Gauge attributes, used to generate a unique key to store the gauge.
        :returns:  The integer or float value last recorded for the provided Gauge name.
        """
        ...

def get_otel_logger(cls) -> SafeOtelLogger: ...
